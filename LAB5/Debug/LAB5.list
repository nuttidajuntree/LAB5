
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b4c  08004b4c  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b54  08004b54  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08004b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000015c  08004cb8  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08004cb8  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bf3  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c6  00000000  00000000  00028d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  0002ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015967  00000000  00000000  0002b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d39  00000000  00000000  00040ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d9f  00000000  00000000  00049820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf5bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002000  00000000  00000000  000cf610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004088 	.word	0x08004088

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	08004088 	.word	0x08004088

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fc66 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f83e 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 f8d0 	bl	8000f80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000de0:	f000 f8a4 	bl	8000f2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, RxBuffer, 1);		// start Interrupt
 8000de4:	2201      	movs	r2, #1
 8000de6:	4916      	ldr	r1, [pc, #88]	; (8000e40 <main+0x70>)
 8000de8:	4816      	ldr	r0, [pc, #88]	; (8000e44 <main+0x74>)
 8000dea:	f001 fd83 	bl	80028f4 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart2, main_menu, 227);	// print UART main menu
 8000dee:	22e3      	movs	r2, #227	; 0xe3
 8000df0:	4915      	ldr	r1, [pc, #84]	; (8000e48 <main+0x78>)
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <main+0x74>)
 8000df4:	f001 fd39 	bl	800286a <HAL_UART_Transmit_IT>
  Status_Button[0] = 'U';Status_Button[1] = 'n';Status_Button[2] = 'P';		// set initial status of button
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <main+0x7c>)
 8000dfa:	2255      	movs	r2, #85	; 0x55
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <main+0x7c>)
 8000e00:	226e      	movs	r2, #110	; 0x6e
 8000e02:	705a      	strb	r2, [r3, #1]
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <main+0x7c>)
 8000e06:	2250      	movs	r2, #80	; 0x50
 8000e08:	709a      	strb	r2, [r3, #2]
  Status_Button[3] = 'r';Status_Button[4] = 'e';Status_Button[5] = 's';
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <main+0x7c>)
 8000e0c:	2272      	movs	r2, #114	; 0x72
 8000e0e:	70da      	strb	r2, [r3, #3]
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <main+0x7c>)
 8000e12:	2265      	movs	r2, #101	; 0x65
 8000e14:	711a      	strb	r2, [r3, #4]
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <main+0x7c>)
 8000e18:	2273      	movs	r2, #115	; 0x73
 8000e1a:	715a      	strb	r2, [r3, #5]
  Status_Button[6] = 's';Status_Button[7] = '\0';
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <main+0x7c>)
 8000e1e:	2273      	movs	r2, #115	; 0x73
 8000e20:	719a      	strb	r2, [r3, #6]
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <main+0x7c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	71da      	strb	r2, [r3, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DummyTask(Hz_LED);	// toggle LED
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <main+0x80>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f91c 	bl	800106c <DummyTask>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);	// for logic analyzer
 8000e34:	2101      	movs	r1, #1
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <main+0x84>)
 8000e38:	f000 ffff 	bl	8001e3a <HAL_GPIO_TogglePin>
	  DummyTask(Hz_LED);	// toggle LED
 8000e3c:	e7f4      	b.n	8000e28 <main+0x58>
 8000e3e:	bf00      	nop
 8000e40:	200001bc 	.word	0x200001bc
 8000e44:	20000178 	.word	0x20000178
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	2000033c 	.word	0x2000033c
 8000e50:	200000e3 	.word	0x200000e3
 8000e54:	40020000 	.word	0x40020000

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b094      	sub	sp, #80	; 0x50
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	2230      	movs	r2, #48	; 0x30
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 fc98 	bl	800379c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <SystemClock_Config+0xcc>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <SystemClock_Config+0xcc>)
 8000e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <SystemClock_Config+0xcc>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <SystemClock_Config+0xd0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <SystemClock_Config+0xd0>)
 8000ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <SystemClock_Config+0xd0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ecc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 ffde 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eea:	f000 faaf 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eee:	230f      	movs	r3, #15
 8000ef0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fa40 	bl	8002390 <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f16:	f000 fa99 	bl	800144c <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3750      	adds	r7, #80	; 0x50
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40007000 	.word	0x40007000

08000f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART2_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f38:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f001 fc34 	bl	80027d0 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 fa6d 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000178 	.word	0x20000178
 8000f7c:	40004400 	.word	0x40004400

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a29      	ldr	r2, [pc, #164]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b27      	ldr	r3, [pc, #156]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_GPIO_Init+0xe0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2121      	movs	r1, #33	; 0x21
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <MX_GPIO_Init+0xe4>)
 800100c:	f000 fefc 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001016:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <MX_GPIO_Init+0xe8>)
 8001028:	f000 fd52 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 800102c:	2321      	movs	r3, #33	; 0x21
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <MX_GPIO_Init+0xe4>)
 8001044:	f000 fd44 	bl	8001ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2028      	movs	r0, #40	; 0x28
 800104e:	f000 fc76 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001052:	2028      	movs	r0, #40	; 0x28
 8001054:	f000 fc8f 	bl	8001976 <HAL_NVIC_EnableIRQ>

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020800 	.word	0x40020800

0800106c <DummyTask>:

/* USER CODE BEGIN 4 */
void DummyTask(uint16_t Hz_LED)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
	static uint32_t timestamp=0;
	if(HAL_GetTick()>=timestamp)
 8001076:	f000 fb7b 	bl	8001770 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <DummyTask+0xa0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d33f      	bcc.n	8001104 <DummyTask+0x98>
	{
		Time = (1.0/Hz_LED)*500.0;			// 1 Hz = 500 ms on & 500 ms off
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa54 	bl	8000534 <__aeabi_i2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	491e      	ldr	r1, [pc, #120]	; (8001110 <DummyTask+0xa4>)
 8001096:	f7ff fbe1 	bl	800085c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <DummyTask+0xa8>)
 80010a8:	f7ff faae 	bl	8000608 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fcba 	bl	8000a2c <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <DummyTask+0xac>)
 80010bc:	6013      	str	r3, [r2, #0]
		timestamp = HAL_GetTick()+Time;
 80010be:	f000 fb57 	bl	8001770 <HAL_GetTick>
 80010c2:	ee07 0a90 	vmov	s15, r0
 80010c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <DummyTask+0xac>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d8:	ee17 2a90 	vmov	r2, s15
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <DummyTask+0xa0>)
 80010de:	601a      	str	r2, [r3, #0]
		if(Hz_LED_State == 0){				// LED off
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <DummyTask+0xb0>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d105      	bne.n	80010f4 <DummyTask+0x88>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2120      	movs	r1, #32
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <DummyTask+0xb4>)
 80010ee:	f000 fe8b 	bl	8001e08 <HAL_GPIO_WritePin>
		}
		else if(Hz_LED_State == 1){			// LED toggle
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		}
	}
}
 80010f2:	e007      	b.n	8001104 <DummyTask+0x98>
		else if(Hz_LED_State == 1){			// LED toggle
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <DummyTask+0xb0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d103      	bne.n	8001104 <DummyTask+0x98>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010fc:	2120      	movs	r1, #32
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <DummyTask+0xb4>)
 8001100:	f000 fe9b 	bl	8001e3a <HAL_GPIO_TogglePin>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000348 	.word	0x20000348
 8001110:	3ff00000 	.word	0x3ff00000
 8001114:	407f4000 	.word	0x407f4000
 8001118:	200000e8 	.word	0x200000e8
 800111c:	200000e4 	.word	0x200000e4
 8001120:	40020000 	.word	0x40020000

08001124 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){		// interrupt by button
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001134:	d16c      	bne.n	8001210 <HAL_GPIO_EXTI_Callback+0xec>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && State_UART[0] == '1'){
 8001136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113a:	4837      	ldr	r0, [pc, #220]	; (8001218 <HAL_GPIO_EXTI_Callback+0xf4>)
 800113c:	f000 fe4c 	bl	8001dd8 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d12b      	bne.n	800119e <HAL_GPIO_EXTI_Callback+0x7a>
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b31      	cmp	r3, #49	; 0x31
 800114c:	d127      	bne.n	800119e <HAL_GPIO_EXTI_Callback+0x7a>
			Status_Button[0] = 'P';Status_Button[1] = 'r';Status_Button[2] = 'e';
 800114e:	4b34      	ldr	r3, [pc, #208]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001150:	2250      	movs	r2, #80	; 0x50
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	4b32      	ldr	r3, [pc, #200]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001156:	2272      	movs	r2, #114	; 0x72
 8001158:	705a      	strb	r2, [r3, #1]
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 800115c:	2265      	movs	r2, #101	; 0x65
 800115e:	709a      	strb	r2, [r3, #2]
			Status_Button[3] = 's';Status_Button[4] = 's';Status_Button[5] = '\0';
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001162:	2273      	movs	r2, #115	; 0x73
 8001164:	70da      	strb	r2, [r3, #3]
 8001166:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001168:	2273      	movs	r2, #115	; 0x73
 800116a:	711a      	strb	r2, [r3, #4]
 800116c:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 800116e:	2200      	movs	r2, #0
 8001170:	715a      	strb	r2, [r3, #5]
			sprintf((char*)TxBuffer,"\n\n\r Button pressed : %s\r\n"
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001174:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <HAL_GPIO_EXTI_Callback+0x100>)
 8001176:	492c      	ldr	r1, [pc, #176]	; (8001228 <HAL_GPIO_EXTI_Callback+0x104>)
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <HAL_GPIO_EXTI_Callback+0x108>)
 800117a:	f002 fb17 	bl	80037ac <siprintf>
					"\n\n\n\n          BUTTON STATUS\r\n"
					"\n       button status : %s\r\n\n\n\n\n"
					"                     Press 'x' to Back.\r\n\n",RxBuffer,Status_Button);
			HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800117e:	482b      	ldr	r0, [pc, #172]	; (800122c <HAL_GPIO_EXTI_Callback+0x108>)
 8001180:	f7ff f82e 	bl	80001e0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4928      	ldr	r1, [pc, #160]	; (800122c <HAL_GPIO_EXTI_Callback+0x108>)
 800118c:	4828      	ldr	r0, [pc, #160]	; (8001230 <HAL_GPIO_EXTI_Callback+0x10c>)
 800118e:	f001 fb6c 	bl	800286a <HAL_UART_Transmit_IT>
			HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	4923      	ldr	r1, [pc, #140]	; (8001224 <HAL_GPIO_EXTI_Callback+0x100>)
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001198:	f001 fbac 	bl	80028f4 <HAL_UART_Receive_IT>
					"                     Press 'x' to Back.\r\n\n",RxBuffer,Status_Button);
			HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
			HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
		}
	}
}
 800119c:	e038      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0xec>
		else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1 && State_UART[0] == '1'){
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	481d      	ldr	r0, [pc, #116]	; (8001218 <HAL_GPIO_EXTI_Callback+0xf4>)
 80011a4:	f000 fe18 	bl	8001dd8 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_EXTI_Callback+0xec>
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_GPIO_EXTI_Callback+0xf8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b31      	cmp	r3, #49	; 0x31
 80011b4:	d12c      	bne.n	8001210 <HAL_GPIO_EXTI_Callback+0xec>
			Status_Button[0] = 'U';Status_Button[1] = 'n';Status_Button[2] = 'P';
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011b8:	2255      	movs	r2, #85	; 0x55
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011be:	226e      	movs	r2, #110	; 0x6e
 80011c0:	705a      	strb	r2, [r3, #1]
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011c4:	2250      	movs	r2, #80	; 0x50
 80011c6:	709a      	strb	r2, [r3, #2]
			Status_Button[3] = 'r';Status_Button[4] = 'e';Status_Button[5] = 's';
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011ca:	2272      	movs	r2, #114	; 0x72
 80011cc:	70da      	strb	r2, [r3, #3]
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011d0:	2265      	movs	r2, #101	; 0x65
 80011d2:	711a      	strb	r2, [r3, #4]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011d6:	2273      	movs	r2, #115	; 0x73
 80011d8:	715a      	strb	r2, [r3, #5]
			Status_Button[6] = 's';Status_Button[7] = '\0';
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011dc:	2273      	movs	r2, #115	; 0x73
 80011de:	719a      	strb	r2, [r3, #6]
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	71da      	strb	r2, [r3, #7]
			sprintf((char*)TxBuffer,"\n\n\r Button pressed : %s\r\n"
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_GPIO_EXTI_Callback+0x100>)
 80011ea:	490f      	ldr	r1, [pc, #60]	; (8001228 <HAL_GPIO_EXTI_Callback+0x104>)
 80011ec:	480f      	ldr	r0, [pc, #60]	; (800122c <HAL_GPIO_EXTI_Callback+0x108>)
 80011ee:	f002 fadd 	bl	80037ac <siprintf>
			HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <HAL_GPIO_EXTI_Callback+0x108>)
 80011f4:	f7fe fff4 	bl	80001e0 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	490b      	ldr	r1, [pc, #44]	; (800122c <HAL_GPIO_EXTI_Callback+0x108>)
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001202:	f001 fb32 	bl	800286a <HAL_UART_Transmit_IT>
			HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8001206:	2201      	movs	r2, #1
 8001208:	4906      	ldr	r1, [pc, #24]	; (8001224 <HAL_GPIO_EXTI_Callback+0x100>)
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <HAL_GPIO_EXTI_Callback+0x10c>)
 800120c:	f001 fb72 	bl	80028f4 <HAL_UART_Receive_IT>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020800 	.word	0x40020800
 800121c:	20000338 	.word	0x20000338
 8001220:	2000033c 	.word	0x2000033c
 8001224:	200001bc 	.word	0x200001bc
 8001228:	080040a0 	.word	0x080040a0
 800122c:	200001d0 	.word	0x200001d0
 8001230:	20000178 	.word	0x20000178

08001234 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)			// interrupt by UART
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a72      	ldr	r2, [pc, #456]	; (8001408 <HAL_UART_RxCpltCallback+0x1d4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	f040 80dd 	bne.w	8001400 <HAL_UART_RxCpltCallback+0x1cc>
	{
		RxBuffer[1] = '\0';
 8001246:	4b71      	ldr	r3, [pc, #452]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001248:	2200      	movs	r2, #0
 800124a:	705a      	strb	r2, [r3, #1]

	    if(RxBuffer[0] == '0' && State_UART[0] == '\0'){
 800124c:	4b6f      	ldr	r3, [pc, #444]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b30      	cmp	r3, #48	; 0x30
 8001252:	d10c      	bne.n	800126e <HAL_UART_RxCpltCallback+0x3a>
 8001254:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d108      	bne.n	800126e <HAL_UART_RxCpltCallback+0x3a>
	    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n\n\n"
 800125c:	4a6b      	ldr	r2, [pc, #428]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 800125e:	496d      	ldr	r1, [pc, #436]	; (8001414 <HAL_UART_RxCpltCallback+0x1e0>)
 8001260:	486d      	ldr	r0, [pc, #436]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 8001262:	f002 faa3 	bl	80037ac <siprintf>
	    			"       a        Speed Up +1 Hz\r\n"
	    			"       s       Speed Down -1 Hz\r\n"
	    			"       d            On/Off\r\n\n"
	    			"\n Please press the button .  .  .\r\n\n"
	    			"\n                     Press 'x' to Back.\r\n",RxBuffer);
		    State_UART[0] = '0';
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 8001268:	2230      	movs	r2, #48	; 0x30
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e0b9      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
	    }
	    else if(RxBuffer[0] == '1' && State_UART[0] == '\0'){
 800126e:	4b67      	ldr	r3, [pc, #412]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b31      	cmp	r3, #49	; 0x31
 8001274:	d10d      	bne.n	8001292 <HAL_UART_RxCpltCallback+0x5e>
 8001276:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_UART_RxCpltCallback+0x5e>
	    	sprintf((char*)TxBuffer,"\n\n\r Button pressed : %s\r\n"
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_UART_RxCpltCallback+0x1e8>)
 8001280:	4a62      	ldr	r2, [pc, #392]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001282:	4967      	ldr	r1, [pc, #412]	; (8001420 <HAL_UART_RxCpltCallback+0x1ec>)
 8001284:	4864      	ldr	r0, [pc, #400]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 8001286:	f002 fa91 	bl	80037ac <siprintf>
					"\n\n\n\n          BUTTON STATUS\r\n"
					"\n       button status : %s\r\n\n\n\n\n"
					"                     Press 'x' to Back.\r\n\n",RxBuffer,Status_Button);
	    	State_UART[0] = '1';
 800128a:	4b61      	ldr	r3, [pc, #388]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 800128c:	2231      	movs	r2, #49	; 0x31
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e0a7      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
	    }
	    else if(RxBuffer[0] == 'a' && State_UART[0] == '0'){
 8001292:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b61      	cmp	r3, #97	; 0x61
 8001298:	d114      	bne.n	80012c4 <HAL_UART_RxCpltCallback+0x90>
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b30      	cmp	r3, #48	; 0x30
 80012a0:	d110      	bne.n	80012c4 <HAL_UART_RxCpltCallback+0x90>
	    	Hz_LED += 1;		// 1 Hz = 1000 msec
 80012a2:	4b60      	ldr	r3, [pc, #384]	; (8001424 <HAL_UART_RxCpltCallback+0x1f0>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <HAL_UART_RxCpltCallback+0x1f0>)
 80012ac:	701a      	strb	r2, [r3, #0]
	    	State_UART[1] = 'a';
 80012ae:	4b58      	ldr	r3, [pc, #352]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 80012b0:	2261      	movs	r2, #97	; 0x61
 80012b2:	705a      	strb	r2, [r3, #1]
	    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n\n\n"
 80012b4:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <HAL_UART_RxCpltCallback+0x1f0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4a54      	ldr	r2, [pc, #336]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80012ba:	495b      	ldr	r1, [pc, #364]	; (8001428 <HAL_UART_RxCpltCallback+0x1f4>)
 80012bc:	4856      	ldr	r0, [pc, #344]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 80012be:	f002 fa75 	bl	80037ac <siprintf>
 80012c2:	e08e      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
	    			"       d            On/Off\r\n\n"
	    			"    Frequency of LED : %d\r\n"
	    			"\n Please press the button .  .  .\r\n"
	    			"\n                     Press 'x' to Back.\r\n",RxBuffer,Hz_LED);
	    }
	    else if(RxBuffer[0] == 's' && State_UART[0] == '0'){
 80012c4:	4b51      	ldr	r3, [pc, #324]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b73      	cmp	r3, #115	; 0x73
 80012ca:	d114      	bne.n	80012f6 <HAL_UART_RxCpltCallback+0xc2>
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b30      	cmp	r3, #48	; 0x30
 80012d2:	d110      	bne.n	80012f6 <HAL_UART_RxCpltCallback+0xc2>
	    	Hz_LED -= 1;
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_UART_RxCpltCallback+0x1f0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <HAL_UART_RxCpltCallback+0x1f0>)
 80012de:	701a      	strb	r2, [r3, #0]
	    	State_UART[1] = 's';
 80012e0:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 80012e2:	2273      	movs	r2, #115	; 0x73
 80012e4:	705a      	strb	r2, [r3, #1]
	    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n\n\n"
 80012e6:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <HAL_UART_RxCpltCallback+0x1f0>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4a48      	ldr	r2, [pc, #288]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80012ec:	494f      	ldr	r1, [pc, #316]	; (800142c <HAL_UART_RxCpltCallback+0x1f8>)
 80012ee:	484a      	ldr	r0, [pc, #296]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 80012f0:	f002 fa5c 	bl	80037ac <siprintf>
 80012f4:	e075      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
	    			"       d            On/Off\r\n\n"
	    			"     Frequency of LED : %d\r\n"
	    			"\n Please press the button .  .  .\r\n"
	    			"\n                     Press 'x' to Back.\r\n",RxBuffer,Hz_LED);
	    }
	    else if(RxBuffer[0] == 'd' && State_UART[0] == '0'){
 80012f6:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d120      	bne.n	8001340 <HAL_UART_RxCpltCallback+0x10c>
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b30      	cmp	r3, #48	; 0x30
 8001304:	d11c      	bne.n	8001340 <HAL_UART_RxCpltCallback+0x10c>
		    State_UART[1] = 'd';
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 8001308:	2264      	movs	r2, #100	; 0x64
 800130a:	705a      	strb	r2, [r3, #1]
		    if(Hz_LED_State == 1){		// on to off
 800130c:	4b48      	ldr	r3, [pc, #288]	; (8001430 <HAL_UART_RxCpltCallback+0x1fc>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d108      	bne.n	8001326 <HAL_UART_RxCpltCallback+0xf2>
		    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n\n\n"
 8001314:	4a3d      	ldr	r2, [pc, #244]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001316:	4947      	ldr	r1, [pc, #284]	; (8001434 <HAL_UART_RxCpltCallback+0x200>)
 8001318:	483f      	ldr	r0, [pc, #252]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 800131a:	f002 fa47 	bl	80037ac <siprintf>
		    			"       s       Speed Down -1 Hz\r\n"
		    			"       d            On/Off\r\n\n"
		    			"     State LED : Off\r\n"
		    			"\n Please press the button .  .  .\r\n"
		    			"\n                     Press 'x' to Back.\r\n",RxBuffer);
			    Hz_LED_State = 0;
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_UART_RxCpltCallback+0x1fc>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		    if(Hz_LED_State == 1){		// on to off
 8001324:	e05c      	b.n	80013e0 <HAL_UART_RxCpltCallback+0x1ac>
		    }
		    else if(Hz_LED_State == 0){		// off to on
 8001326:	4b42      	ldr	r3, [pc, #264]	; (8001430 <HAL_UART_RxCpltCallback+0x1fc>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d158      	bne.n	80013e0 <HAL_UART_RxCpltCallback+0x1ac>
		    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n\n\n"
 800132e:	4a37      	ldr	r2, [pc, #220]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001330:	4941      	ldr	r1, [pc, #260]	; (8001438 <HAL_UART_RxCpltCallback+0x204>)
 8001332:	4839      	ldr	r0, [pc, #228]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 8001334:	f002 fa3a 	bl	80037ac <siprintf>
		    			"       s       Speed Down -1 Hz\r\n"
		    			"       d            On/Off\r\n\n"
		    			"     State LED : On\r\n"
		    			"\n Please press the button .  .  .\r\n"
		    			"\n                     Press 'x' to Back.\r\n",RxBuffer);
			    Hz_LED_State = 1;
 8001338:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <HAL_UART_RxCpltCallback+0x1fc>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		    if(Hz_LED_State == 1){		// on to off
 800133e:	e04f      	b.n	80013e0 <HAL_UART_RxCpltCallback+0x1ac>
		    }
	    }
	    else if(RxBuffer[0] == 'x' && (State_UART[0] == '0' || State_UART[0] == '1')){
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b78      	cmp	r3, #120	; 0x78
 8001346:	d110      	bne.n	800136a <HAL_UART_RxCpltCallback+0x136>
 8001348:	4b31      	ldr	r3, [pc, #196]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b30      	cmp	r3, #48	; 0x30
 800134e:	d003      	beq.n	8001358 <HAL_UART_RxCpltCallback+0x124>
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b31      	cmp	r3, #49	; 0x31
 8001356:	d108      	bne.n	800136a <HAL_UART_RxCpltCallback+0x136>
	    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n"
 8001358:	4a2c      	ldr	r2, [pc, #176]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 800135a:	4938      	ldr	r1, [pc, #224]	; (800143c <HAL_UART_RxCpltCallback+0x208>)
 800135c:	482e      	ldr	r0, [pc, #184]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 800135e:	f002 fa25 	bl	80037ac <siprintf>
	    			"             MAIN MENU\r\n\n      button         command\r\n"
	    			"   ----------------------------\r\n"
	    			"      0          LED CONTROL\r\n"
	    			"      1         BUTTON STATUS\r\n\n"
	    			"\n Please press the button .  .  .\r\n\n",RxBuffer);
		    State_UART[0] = '\0';
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e03b      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
	    }
	    else if(RxBuffer[0] != '1' && RxBuffer[0] != '0'  && State_UART[0] == '\0'){
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b31      	cmp	r3, #49	; 0x31
 8001370:	d00d      	beq.n	800138e <HAL_UART_RxCpltCallback+0x15a>
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b30      	cmp	r3, #48	; 0x30
 8001378:	d009      	beq.n	800138e <HAL_UART_RxCpltCallback+0x15a>
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <HAL_UART_RxCpltCallback+0x15a>
	    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n\n  .Error Button.\r\n"
 8001382:	4a22      	ldr	r2, [pc, #136]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001384:	492e      	ldr	r1, [pc, #184]	; (8001440 <HAL_UART_RxCpltCallback+0x20c>)
 8001386:	4824      	ldr	r0, [pc, #144]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 8001388:	f002 fa10 	bl	80037ac <siprintf>
 800138c:	e029      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
					"   ----------------------------\r\n"
					"      0          LED CONTROL\r\n"
					"      1         BUTTON STATUS\r\n\n"
					"\n Please press the button .  .  .\r\n",RxBuffer);
	    }
	    else if(RxBuffer[0] != 'a' && RxBuffer[0] != 's' && RxBuffer[0] != 'd' && RxBuffer[0] != 'x' && State_UART[0] == '0'){
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b61      	cmp	r3, #97	; 0x61
 8001394:	d015      	beq.n	80013c2 <HAL_UART_RxCpltCallback+0x18e>
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b73      	cmp	r3, #115	; 0x73
 800139c:	d011      	beq.n	80013c2 <HAL_UART_RxCpltCallback+0x18e>
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d00d      	beq.n	80013c2 <HAL_UART_RxCpltCallback+0x18e>
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b78      	cmp	r3, #120	; 0x78
 80013ac:	d009      	beq.n	80013c2 <HAL_UART_RxCpltCallback+0x18e>
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b30      	cmp	r3, #48	; 0x30
 80013b4:	d105      	bne.n	80013c2 <HAL_UART_RxCpltCallback+0x18e>
	    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n\n  .Error Button.\r\n\n"
 80013b6:	4a15      	ldr	r2, [pc, #84]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80013b8:	4922      	ldr	r1, [pc, #136]	; (8001444 <HAL_UART_RxCpltCallback+0x210>)
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 80013bc:	f002 f9f6 	bl	80037ac <siprintf>
 80013c0:	e00f      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
					"       s       Speed Down -1 Hz\r\n"
					"       d            On/Off\r\n\n"
					"\n Please press the button .  .  .\r\n"
					"\n                     Press 'x' to Back.\r\n",RxBuffer);
	    }
	    else if(RxBuffer[0] != 'x' && State_UART[0] == '1'){
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b78      	cmp	r3, #120	; 0x78
 80013c8:	d00b      	beq.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_UART_RxCpltCallback+0x1dc>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b31      	cmp	r3, #49	; 0x31
 80013d0:	d107      	bne.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
	    	sprintf((char*)TxBuffer,"\n\r Button pressed : %s\r\n\n  .Error Button.\r\n\n"
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_UART_RxCpltCallback+0x1e8>)
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80013d6:	491c      	ldr	r1, [pc, #112]	; (8001448 <HAL_UART_RxCpltCallback+0x214>)
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 80013da:	f002 f9e7 	bl	80037ac <siprintf>
 80013de:	e000      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x1ae>
		    if(Hz_LED_State == 1){		// on to off
 80013e0:	bf00      	nop
	    			"\n\n\n          BUTTON STATUS\r\n"
					"\n       button status : %s\r\n\n\n\n"
					"                     Press 'x' to Back.\r\n\n",RxBuffer,Status_Button);
	    }
		HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 80013e4:	f7fe fefc 	bl	80001e0 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	490a      	ldr	r1, [pc, #40]	; (8001418 <HAL_UART_RxCpltCallback+0x1e4>)
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_UART_RxCpltCallback+0x1d4>)
 80013f2:	f001 fa3a 	bl	800286a <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	4904      	ldr	r1, [pc, #16]	; (800140c <HAL_UART_RxCpltCallback+0x1d8>)
 80013fa:	4803      	ldr	r0, [pc, #12]	; (8001408 <HAL_UART_RxCpltCallback+0x1d4>)
 80013fc:	f001 fa7a 	bl	80028f4 <HAL_UART_Receive_IT>
	}
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000178 	.word	0x20000178
 800140c:	200001bc 	.word	0x200001bc
 8001410:	20000338 	.word	0x20000338
 8001414:	08004124 	.word	0x08004124
 8001418:	200001d0 	.word	0x200001d0
 800141c:	2000033c 	.word	0x2000033c
 8001420:	080040a0 	.word	0x080040a0
 8001424:	200000e3 	.word	0x200000e3
 8001428:	08004248 	.word	0x08004248
 800142c:	08004384 	.word	0x08004384
 8001430:	200000e4 	.word	0x200000e4
 8001434:	080044c4 	.word	0x080044c4
 8001438:	080045fc 	.word	0x080045fc
 800143c:	08004734 	.word	0x08004734
 8001440:	0800482c 	.word	0x0800482c
 8001444:	08004938 	.word	0x08004938
 8001448:	08004a6c 	.word	0x08004a6c

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	e7fe      	b.n	8001454 <Error_Handler+0x8>
	...

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_MspInit+0x4c>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_MspInit+0x4c>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001496:	2007      	movs	r0, #7
 8001498:	f000 fa46 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_UART_MspInit+0x94>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d133      	bne.n	8001532 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_UART_MspInit+0x98>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_UART_MspInit+0x98>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_UART_MspInit+0x98>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_UART_MspInit+0x98>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a14      	ldr	r2, [pc, #80]	; (8001540 <HAL_UART_MspInit+0x98>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_UART_MspInit+0x98>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001502:	230c      	movs	r3, #12
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001512:	2307      	movs	r3, #7
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <HAL_UART_MspInit+0x9c>)
 800151e:	f000 fad7 	bl	8001ad0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2026      	movs	r0, #38	; 0x26
 8001528:	f000 fa09 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800152c:	2026      	movs	r0, #38	; 0x26
 800152e:	f000 fa22 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40004400 	.word	0x40004400
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f8d8 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <USART2_IRQHandler+0x10>)
 80015a2:	f001 f9d7 	bl	8002954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000178 	.word	0x20000178

080015b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015b8:	f000 fc5a 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f002 f8aa 	bl	8003748 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20020000 	.word	0x20020000
 8001620:	00000400 	.word	0x00000400
 8001624:	2000034c 	.word	0x2000034c
 8001628:	20000368 	.word	0x20000368

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001656:	490e      	ldr	r1, [pc, #56]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800166c:	4c0b      	ldr	r4, [pc, #44]	; (800169c <LoopFillZerobss+0x26>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167a:	f7ff ffd7 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f002 f869 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fba5 	bl	8000dd0 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001694:	08004b5c 	.word	0x08004b5c
  ldr r2, =_sbss
 8001698:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 800169c:	20000364 	.word	0x20000364

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_Init+0x40>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_Init+0x40>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x40>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f92b 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff febe 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f943 	bl	8001992 <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f90b 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000ec 	.word	0x200000ec
 8001740:	200000f4 	.word	0x200000f4
 8001744:	200000f0 	.word	0x200000f0

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	200000f4 	.word	0x200000f4
 800176c:	20000350 	.word	0x20000350

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000350 	.word	0x20000350

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff3e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff31 	bl	80017ec <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff feda 	bl	8001770 <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d008      	beq.n	80019dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e052      	b.n	8001a82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0216 	bic.w	r2, r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d103      	bne.n	8001a0c <HAL_DMA_Abort+0x62>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d007      	beq.n	8001a1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0208 	bic.w	r2, r2, #8
 8001a1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a2c:	e013      	b.n	8001a56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a2e:	f7ff fe9f 	bl	8001770 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d90c      	bls.n	8001a56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2203      	movs	r2, #3
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e015      	b.n	8001a82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e4      	bne.n	8001a2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	223f      	movs	r2, #63	; 0x3f
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e00c      	b.n	8001ac2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2205      	movs	r2, #5
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e159      	b.n	8001da0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f040 8148 	bne.w	8001d9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d005      	beq.n	8001b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d130      	bne.n	8001b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 0201 	and.w	r2, r3, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d017      	beq.n	8001bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	69b9      	ldr	r1, [r7, #24]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a2 	beq.w	8001d9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a56      	ldr	r2, [pc, #344]	; (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b54      	ldr	r3, [pc, #336]	; (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c72:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_GPIO_Init+0x2ec>)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a49      	ldr	r2, [pc, #292]	; (8001dc0 <HAL_GPIO_Init+0x2f0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <HAL_GPIO_Init+0x202>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a48      	ldr	r2, [pc, #288]	; (8001dc4 <HAL_GPIO_Init+0x2f4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0x1fe>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <HAL_GPIO_Init+0x2f8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00d      	beq.n	8001cca <HAL_GPIO_Init+0x1fa>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a46      	ldr	r2, [pc, #280]	; (8001dcc <HAL_GPIO_Init+0x2fc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x1f6>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a45      	ldr	r2, [pc, #276]	; (8001dd0 <HAL_GPIO_Init+0x300>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_GPIO_Init+0x1f2>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e008      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e004      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f002 0203 	and.w	r2, r2, #3
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	4093      	lsls	r3, r2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce4:	4935      	ldr	r1, [pc, #212]	; (8001dbc <HAL_GPIO_Init+0x2ec>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d16:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d40:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d94:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b0f      	cmp	r3, #15
 8001da4:	f67f aea2 	bls.w	8001aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e001      	b.n	8001dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	041a      	lsls	r2, r3, #16
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f948 	bl	8001124 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e267      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d075      	beq.n	8001faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebe:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b7e      	ldr	r3, [pc, #504]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x108>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d157      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e242      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x74>
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x98>
 8001f1e:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6f      	ldr	r2, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6c      	ldr	r2, [pc, #432]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f38:	4b69      	ldr	r3, [pc, #420]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fc0a 	bl	8001770 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fc06 	bl	8001770 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e207      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fbf6 	bl	8001770 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff fbf2 	bl	8001770 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1f3      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0xe8>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d063      	beq.n	800207e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d11c      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d116      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1c7      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4937      	ldr	r1, [pc, #220]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	e03a      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7ff fbab 	bl	8001770 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201e:	f7ff fba7 	bl	8001770 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1a8      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4925      	ldr	r1, [pc, #148]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fb8a 	bl	8001770 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002060:	f7ff fb86 	bl	8001770 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e187      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d036      	beq.n	80020f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_RCC_OscConfig+0x248>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7ff fb6a 	bl	8001770 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff fb66 	bl	8001770 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e167      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x200>
 80020be:	e01b      	b.n	80020f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_OscConfig+0x248>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fb53 	bl	8001770 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	e00e      	b.n	80020ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ce:	f7ff fb4f 	bl	8001770 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d907      	bls.n	80020ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e150      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	42470000 	.word	0x42470000
 80020e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ea      	bne.n	80020ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8097 	beq.w	8002234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b7d      	ldr	r3, [pc, #500]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a7c      	ldr	r2, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b77      	ldr	r3, [pc, #476]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b74      	ldr	r3, [pc, #464]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a73      	ldr	r2, [pc, #460]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff fb0f 	bl	8001770 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7ff fb0b 	bl	8001770 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e10c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x2ea>
 800217c:	4b64      	ldr	r3, [pc, #400]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a63      	ldr	r2, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x30c>
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a5e      	ldr	r2, [pc, #376]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a5b      	ldr	r2, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 80021ac:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	4b55      	ldr	r3, [pc, #340]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a54      	ldr	r2, [pc, #336]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff fad0 	bl	8001770 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7ff facc 	bl	8001770 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0cb      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ee      	beq.n	80021d4 <HAL_RCC_OscConfig+0x334>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7ff faba 	bl	8001770 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7ff fab6 	bl	8001770 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0b5      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ee      	bne.n	8002200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	4a38      	ldr	r2, [pc, #224]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a1 	beq.w	8002380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d05c      	beq.n	8002304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d141      	bne.n	80022d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fa8a 	bl	8001770 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff fa86 	bl	8001770 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e087      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	3b01      	subs	r3, #1
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	491b      	ldr	r1, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7ff fa5f 	bl	8001770 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b6:	f7ff fa5b 	bl	8001770 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e05c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x416>
 80022d4:	e054      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fa48 	bl	8001770 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7ff fa44 	bl	8001770 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e045      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x444>
 8002302:	e03d      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e038      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000
 8002318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x4ec>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d028      	beq.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d121      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0cc      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90c      	bls.n	80023cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7ff f976 	bl	8001770 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7ff f972 	bl	8001770 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f8d6 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00
 800254c:	40023800 	.word	0x40023800
 8002550:	08004b00 	.word	0x08004b00
 8002554:	200000ec 	.word	0x200000ec
 8002558:	200000f0 	.word	0x200000f0

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b094      	sub	sp, #80	; 0x50
 8002562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	647b      	str	r3, [r7, #68]	; 0x44
 8002568:	2300      	movs	r3, #0
 800256a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800256c:	2300      	movs	r3, #0
 800256e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002574:	4b79      	ldr	r3, [pc, #484]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d00d      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002580:	2b08      	cmp	r3, #8
 8002582:	f200 80e1 	bhi.w	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x3a>
 800258e:	e0db      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002594:	e0db      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002596:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_GetSysClockFreq+0x208>)
 8002598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800259a:	e0d8      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4b6f      	ldr	r3, [pc, #444]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b6a      	ldr	r3, [pc, #424]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80025bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4621      	mov	r1, r4
 80025e8:	1a51      	subs	r1, r2, r1
 80025ea:	6139      	str	r1, [r7, #16]
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002600:	4659      	mov	r1, fp
 8002602:	018b      	lsls	r3, r1, #6
 8002604:	4651      	mov	r1, sl
 8002606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260a:	4651      	mov	r1, sl
 800260c:	018a      	lsls	r2, r1, #6
 800260e:	4651      	mov	r1, sl
 8002610:	ebb2 0801 	subs.w	r8, r2, r1
 8002614:	4659      	mov	r1, fp
 8002616:	eb63 0901 	sbc.w	r9, r3, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262e:	4690      	mov	r8, r2
 8002630:	4699      	mov	r9, r3
 8002632:	4623      	mov	r3, r4
 8002634:	eb18 0303 	adds.w	r3, r8, r3
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	462b      	mov	r3, r5
 800263c:	eb49 0303 	adc.w	r3, r9, r3
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264e:	4629      	mov	r1, r5
 8002650:	024b      	lsls	r3, r1, #9
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002658:	4621      	mov	r1, r4
 800265a:	024a      	lsls	r2, r1, #9
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002662:	2200      	movs	r2, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
 8002666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800266c:	f7fe fa2e 	bl	8000acc <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002678:	e058      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	4618      	mov	r0, r3
 8002684:	4611      	mov	r1, r2
 8002686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	0159      	lsls	r1, r3, #5
 80026a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a6:	0150      	lsls	r0, r2, #5
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4641      	mov	r1, r8
 80026ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026cc:	ebb2 040a 	subs.w	r4, r2, sl
 80026d0:	eb63 050b 	sbc.w	r5, r3, fp
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	00eb      	lsls	r3, r5, #3
 80026de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e2:	00e2      	lsls	r2, r4, #3
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	18e3      	adds	r3, r4, r3
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb45 0303 	adc.w	r3, r5, r3
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	61fa      	str	r2, [r7, #28]
 800271c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002720:	f7fe f9d4 	bl	8000acc <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800273c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800273e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002750:	4618      	mov	r0, r3
 8002752:	3750      	adds	r7, #80	; 0x50
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	00f42400 	.word	0x00f42400
 8002764:	007a1200 	.word	0x007a1200

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200000ec 	.word	0x200000ec

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08004b10 	.word	0x08004b10

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08004b10 	.word	0x08004b10

080027d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e03f      	b.n	8002862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fe56 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fd23 	bl	8003260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	4613      	mov	r3, r2
 8002876:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b20      	cmp	r3, #32
 8002882:	d130      	bne.n	80028e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_UART_Transmit_IT+0x26>
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e029      	b.n	80028e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Transmit_IT+0x38>
 800289e:	2302      	movs	r3, #2
 80028a0:	e022      	b.n	80028e8 <HAL_UART_Transmit_IT+0x7e>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2221      	movs	r2, #33	; 0x21
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80028e6:	2302      	movs	r3, #2
  }
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b20      	cmp	r3, #32
 800290c:	d11d      	bne.n	800294a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_UART_Receive_IT+0x26>
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e016      	b.n	800294c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_UART_Receive_IT+0x38>
 8002928:	2302      	movs	r3, #2
 800292a:	e00f      	b.n	800294c <HAL_UART_Receive_IT+0x58>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	461a      	mov	r2, r3
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fab5 	bl	8002eb0 <UART_Start_Receive_IT>
 8002946:	4603      	mov	r3, r0
 8002948:	e000      	b.n	800294c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0ba      	sub	sp, #232	; 0xe8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_UART_IRQHandler+0x66>
 80029a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fb99 	bl	80030ea <UART_Receive_IT>
      return;
 80029b8:	e256      	b.n	8002e68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80de 	beq.w	8002b80 <HAL_UART_IRQHandler+0x22c>
 80029c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80d1 	beq.w	8002b80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_UART_IRQHandler+0xae>
 80029ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0xd2>
 8002a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f043 0202 	orr.w	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_UART_IRQHandler+0xf6>
 8002a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f043 0204 	orr.w	r2, r3, #4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d011      	beq.n	8002a7a <HAL_UART_IRQHandler+0x126>
 8002a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 81ed 	beq.w	8002e5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x14e>
 8002a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fb24 	bl	80030ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_UART_IRQHandler+0x17a>
 8002ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04f      	beq.n	8002b6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa2c 	bl	8002f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d141      	bne.n	8002b66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3314      	adds	r3, #20
 8002b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b1e:	e841 2300 	strex	r3, r2, [r1]
 8002b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1d9      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d013      	beq.n	8002b5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <HAL_UART_IRQHandler+0x3dc>)
 8002b3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ffa1 	bl	8001a8a <HAL_DMA_Abort_IT>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d016      	beq.n	8002b7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5c:	e00e      	b.n	8002b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f990 	bl	8002e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	e00a      	b.n	8002b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f98c 	bl	8002e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	e006      	b.n	8002b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f988 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b7a:	e170      	b.n	8002e5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	bf00      	nop
    return;
 8002b7e:	e16e      	b.n	8002e5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	f040 814a 	bne.w	8002e1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8143 	beq.w	8002e1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 813c 	beq.w	8002e1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	f040 80b4 	bne.w	8002d34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8140 	beq.w	8002e62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bea:	429a      	cmp	r2, r3
 8002bec:	f080 8139 	bcs.w	8002e62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bf6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c02:	f000 8088 	beq.w	8002d16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c14:	e853 3f00 	ldrex	r3, [r3]
 8002c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1d9      	bne.n	8002c06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3314      	adds	r3, #20
 8002c58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e1      	bne.n	8002c52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c98:	e853 3f00 	ldrex	r3, [r3]
 8002c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3314      	adds	r3, #20
 8002cae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e3      	bne.n	8002c8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce6:	f023 0310 	bic.w	r3, r3, #16
 8002cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e3      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe fe4a 	bl	80019aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8b6 	bl	8002e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d2c:	e099      	b.n	8002e62 <HAL_UART_IRQHandler+0x50e>
 8002d2e:	bf00      	nop
 8002d30:	08002ff3 	.word	0x08002ff3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 808b 	beq.w	8002e66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8086 	beq.w	8002e66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e3      	bne.n	8002d5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3314      	adds	r3, #20
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	623b      	str	r3, [r7, #32]
   return(result);
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3314      	adds	r3, #20
 8002db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002db6:	633a      	str	r2, [r7, #48]	; 0x30
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e3      	bne.n	8002d92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0310 	bic.w	r3, r3, #16
 8002dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	330c      	adds	r3, #12
 8002df8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002dfc:	61fa      	str	r2, [r7, #28]
 8002dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e00:	69b9      	ldr	r1, [r7, #24]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	e841 2300 	strex	r3, r2, [r1]
 8002e08:	617b      	str	r3, [r7, #20]
   return(result);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e3      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f83e 	bl	8002e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e1c:	e023      	b.n	8002e66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_UART_IRQHandler+0x4ea>
 8002e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8ef 	bl	800301a <UART_Transmit_IT>
    return;
 8002e3c:	e014      	b.n	8002e68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <HAL_UART_IRQHandler+0x514>
 8002e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f92f 	bl	80030ba <UART_EndTransmit_IT>
    return;
 8002e5c:	e004      	b.n	8002e68 <HAL_UART_IRQHandler+0x514>
    return;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <HAL_UART_IRQHandler+0x514>
      return;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <HAL_UART_IRQHandler+0x514>
      return;
 8002e66:	bf00      	nop
  }
}
 8002e68:	37e8      	adds	r7, #232	; 0xe8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop

08002e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2222      	movs	r2, #34	; 0x22
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0220 	orr.w	r2, r2, #32
 8002f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b095      	sub	sp, #84	; 0x54
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	e853 3f00 	ldrex	r3, [r3]
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f54:	643a      	str	r2, [r7, #64]	; 0x40
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e5      	bne.n	8002f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3314      	adds	r3, #20
 8002f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e5      	bne.n	8002f68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d119      	bne.n	8002fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f023 0310 	bic.w	r3, r3, #16
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc4:	61ba      	str	r2, [r7, #24]
 8002fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6979      	ldr	r1, [r7, #20]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e5      	bne.n	8002fa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fe6:	bf00      	nop
 8002fe8:	3754      	adds	r7, #84	; 0x54
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff ff39 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b21      	cmp	r3, #33	; 0x21
 800302c:	d13e      	bne.n	80030ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003036:	d114      	bne.n	8003062 <UART_Transmit_IT+0x48>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d110      	bne.n	8003062 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003054:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	1c9a      	adds	r2, r3, #2
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	621a      	str	r2, [r3, #32]
 8003060:	e008      	b.n	8003074 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	1c59      	adds	r1, r3, #1
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6211      	str	r1, [r2, #32]
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29b      	uxth	r3, r3
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4619      	mov	r1, r3
 8003082:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10f      	bne.n	80030a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003096:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fec8 	bl	8002e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b08c      	sub	sp, #48	; 0x30
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b22      	cmp	r3, #34	; 0x22
 80030fc:	f040 80ab 	bne.w	8003256 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	d117      	bne.n	800313a <UART_Receive_IT+0x50>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d113      	bne.n	800313a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	b29a      	uxth	r2, r3
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	1c9a      	adds	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
 8003138:	e026      	b.n	8003188 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d007      	beq.n	800315e <UART_Receive_IT+0x74>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <UART_Receive_IT+0x82>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e008      	b.n	800317e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003178:	b2da      	uxtb	r2, r3
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29b      	uxth	r3, r3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4619      	mov	r1, r3
 8003196:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003198:	2b00      	cmp	r3, #0
 800319a:	d15a      	bne.n	8003252 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0220 	bic.w	r2, r2, #32
 80031aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d135      	bne.n	8003248 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	613b      	str	r3, [r7, #16]
   return(result);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f023 0310 	bic.w	r3, r3, #16
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	623a      	str	r2, [r7, #32]
 8003204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	69f9      	ldr	r1, [r7, #28]
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e5      	bne.n	80031e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b10      	cmp	r3, #16
 8003222:	d10a      	bne.n	800323a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fe29 	bl	8002e98 <HAL_UARTEx_RxEventCallback>
 8003246:	e002      	b.n	800324e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fd fff3 	bl	8001234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e002      	b.n	8003258 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3730      	adds	r7, #48	; 0x30
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003264:	b0c0      	sub	sp, #256	; 0x100
 8003266:	af00      	add	r7, sp, #0
 8003268:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	ea40 0301 	orr.w	r3, r0, r1
 8003288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	431a      	orrs	r2, r3
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032b8:	f021 010c 	bic.w	r1, r1, #12
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032c6:	430b      	orrs	r3, r1
 80032c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	6999      	ldr	r1, [r3, #24]
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	ea40 0301 	orr.w	r3, r0, r1
 80032e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b8f      	ldr	r3, [pc, #572]	; (800352c <UART_SetConfig+0x2cc>)
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d005      	beq.n	8003300 <UART_SetConfig+0xa0>
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b8d      	ldr	r3, [pc, #564]	; (8003530 <UART_SetConfig+0x2d0>)
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d104      	bne.n	800330a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003300:	f7ff fa52 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8003304:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003308:	e003      	b.n	8003312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800330a:	f7ff fa39 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 800330e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331c:	f040 810c 	bne.w	8003538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003324:	2200      	movs	r2, #0
 8003326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800332a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800332e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003332:	4622      	mov	r2, r4
 8003334:	462b      	mov	r3, r5
 8003336:	1891      	adds	r1, r2, r2
 8003338:	65b9      	str	r1, [r7, #88]	; 0x58
 800333a:	415b      	adcs	r3, r3
 800333c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800333e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003342:	4621      	mov	r1, r4
 8003344:	eb12 0801 	adds.w	r8, r2, r1
 8003348:	4629      	mov	r1, r5
 800334a:	eb43 0901 	adc.w	r9, r3, r1
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003362:	4690      	mov	r8, r2
 8003364:	4699      	mov	r9, r3
 8003366:	4623      	mov	r3, r4
 8003368:	eb18 0303 	adds.w	r3, r8, r3
 800336c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003370:	462b      	mov	r3, r5
 8003372:	eb49 0303 	adc.w	r3, r9, r3
 8003376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003386:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800338a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800338e:	460b      	mov	r3, r1
 8003390:	18db      	adds	r3, r3, r3
 8003392:	653b      	str	r3, [r7, #80]	; 0x50
 8003394:	4613      	mov	r3, r2
 8003396:	eb42 0303 	adc.w	r3, r2, r3
 800339a:	657b      	str	r3, [r7, #84]	; 0x54
 800339c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033a4:	f7fd fb92 	bl	8000acc <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4b61      	ldr	r3, [pc, #388]	; (8003534 <UART_SetConfig+0x2d4>)
 80033ae:	fba3 2302 	umull	r2, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	011c      	lsls	r4, r3, #4
 80033b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	1891      	adds	r1, r2, r2
 80033ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80033d0:	415b      	adcs	r3, r3
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033d8:	4641      	mov	r1, r8
 80033da:	eb12 0a01 	adds.w	sl, r2, r1
 80033de:	4649      	mov	r1, r9
 80033e0:	eb43 0b01 	adc.w	fp, r3, r1
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f8:	4692      	mov	sl, r2
 80033fa:	469b      	mov	fp, r3
 80033fc:	4643      	mov	r3, r8
 80033fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003406:	464b      	mov	r3, r9
 8003408:	eb4b 0303 	adc.w	r3, fp, r3
 800340c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800341c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003424:	460b      	mov	r3, r1
 8003426:	18db      	adds	r3, r3, r3
 8003428:	643b      	str	r3, [r7, #64]	; 0x40
 800342a:	4613      	mov	r3, r2
 800342c:	eb42 0303 	adc.w	r3, r2, r3
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
 8003432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800343a:	f7fd fb47 	bl	8000acc <__aeabi_uldivmod>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4611      	mov	r1, r2
 8003444:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <UART_SetConfig+0x2d4>)
 8003446:	fba3 2301 	umull	r2, r3, r3, r1
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2264      	movs	r2, #100	; 0x64
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	1acb      	subs	r3, r1, r3
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800345a:	4b36      	ldr	r3, [pc, #216]	; (8003534 <UART_SetConfig+0x2d4>)
 800345c:	fba3 2302 	umull	r2, r3, r3, r2
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003468:	441c      	add	r4, r3
 800346a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800346e:	2200      	movs	r2, #0
 8003470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003474:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	1891      	adds	r1, r2, r2
 8003482:	63b9      	str	r1, [r7, #56]	; 0x38
 8003484:	415b      	adcs	r3, r3
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800348c:	4641      	mov	r1, r8
 800348e:	1851      	adds	r1, r2, r1
 8003490:	6339      	str	r1, [r7, #48]	; 0x30
 8003492:	4649      	mov	r1, r9
 8003494:	414b      	adcs	r3, r1
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034a4:	4659      	mov	r1, fp
 80034a6:	00cb      	lsls	r3, r1, #3
 80034a8:	4651      	mov	r1, sl
 80034aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ae:	4651      	mov	r1, sl
 80034b0:	00ca      	lsls	r2, r1, #3
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	4642      	mov	r2, r8
 80034ba:	189b      	adds	r3, r3, r2
 80034bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034c0:	464b      	mov	r3, r9
 80034c2:	460a      	mov	r2, r1
 80034c4:	eb42 0303 	adc.w	r3, r2, r3
 80034c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034e0:	460b      	mov	r3, r1
 80034e2:	18db      	adds	r3, r3, r3
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e6:	4613      	mov	r3, r2
 80034e8:	eb42 0303 	adc.w	r3, r2, r3
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034f6:	f7fd fae9 	bl	8000acc <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <UART_SetConfig+0x2d4>)
 8003500:	fba3 1302 	umull	r1, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	2164      	movs	r1, #100	; 0x64
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	3332      	adds	r3, #50	; 0x32
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <UART_SetConfig+0x2d4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	f003 0207 	and.w	r2, r3, #7
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4422      	add	r2, r4
 8003526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003528:	e105      	b.n	8003736 <UART_SetConfig+0x4d6>
 800352a:	bf00      	nop
 800352c:	40011000 	.word	0x40011000
 8003530:	40011400 	.word	0x40011400
 8003534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003542:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800354a:	4642      	mov	r2, r8
 800354c:	464b      	mov	r3, r9
 800354e:	1891      	adds	r1, r2, r2
 8003550:	6239      	str	r1, [r7, #32]
 8003552:	415b      	adcs	r3, r3
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800355a:	4641      	mov	r1, r8
 800355c:	1854      	adds	r4, r2, r1
 800355e:	4649      	mov	r1, r9
 8003560:	eb43 0501 	adc.w	r5, r3, r1
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	00eb      	lsls	r3, r5, #3
 800356e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003572:	00e2      	lsls	r2, r4, #3
 8003574:	4614      	mov	r4, r2
 8003576:	461d      	mov	r5, r3
 8003578:	4643      	mov	r3, r8
 800357a:	18e3      	adds	r3, r4, r3
 800357c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003580:	464b      	mov	r3, r9
 8003582:	eb45 0303 	adc.w	r3, r5, r3
 8003586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003596:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035a6:	4629      	mov	r1, r5
 80035a8:	008b      	lsls	r3, r1, #2
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b0:	4621      	mov	r1, r4
 80035b2:	008a      	lsls	r2, r1, #2
 80035b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035b8:	f7fd fa88 	bl	8000acc <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4b60      	ldr	r3, [pc, #384]	; (8003744 <UART_SetConfig+0x4e4>)
 80035c2:	fba3 2302 	umull	r2, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	011c      	lsls	r4, r3, #4
 80035ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	1891      	adds	r1, r2, r2
 80035e2:	61b9      	str	r1, [r7, #24]
 80035e4:	415b      	adcs	r3, r3
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ec:	4641      	mov	r1, r8
 80035ee:	1851      	adds	r1, r2, r1
 80035f0:	6139      	str	r1, [r7, #16]
 80035f2:	4649      	mov	r1, r9
 80035f4:	414b      	adcs	r3, r1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003604:	4659      	mov	r1, fp
 8003606:	00cb      	lsls	r3, r1, #3
 8003608:	4651      	mov	r1, sl
 800360a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360e:	4651      	mov	r1, sl
 8003610:	00ca      	lsls	r2, r1, #3
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	4603      	mov	r3, r0
 8003618:	4642      	mov	r2, r8
 800361a:	189b      	adds	r3, r3, r2
 800361c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003620:	464b      	mov	r3, r9
 8003622:	460a      	mov	r2, r1
 8003624:	eb42 0303 	adc.w	r3, r2, r3
 8003628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	67bb      	str	r3, [r7, #120]	; 0x78
 8003636:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003644:	4649      	mov	r1, r9
 8003646:	008b      	lsls	r3, r1, #2
 8003648:	4641      	mov	r1, r8
 800364a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364e:	4641      	mov	r1, r8
 8003650:	008a      	lsls	r2, r1, #2
 8003652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003656:	f7fd fa39 	bl	8000acc <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <UART_SetConfig+0x4e4>)
 8003660:	fba3 1302 	umull	r1, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2164      	movs	r1, #100	; 0x64
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	3332      	adds	r3, #50	; 0x32
 8003672:	4a34      	ldr	r2, [pc, #208]	; (8003744 <UART_SetConfig+0x4e4>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367e:	441c      	add	r4, r3
 8003680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003684:	2200      	movs	r2, #0
 8003686:	673b      	str	r3, [r7, #112]	; 0x70
 8003688:	677a      	str	r2, [r7, #116]	; 0x74
 800368a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800368e:	4642      	mov	r2, r8
 8003690:	464b      	mov	r3, r9
 8003692:	1891      	adds	r1, r2, r2
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	415b      	adcs	r3, r3
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800369e:	4641      	mov	r1, r8
 80036a0:	1851      	adds	r1, r2, r1
 80036a2:	6039      	str	r1, [r7, #0]
 80036a4:	4649      	mov	r1, r9
 80036a6:	414b      	adcs	r3, r1
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036b6:	4659      	mov	r1, fp
 80036b8:	00cb      	lsls	r3, r1, #3
 80036ba:	4651      	mov	r1, sl
 80036bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c0:	4651      	mov	r1, sl
 80036c2:	00ca      	lsls	r2, r1, #3
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	4603      	mov	r3, r0
 80036ca:	4642      	mov	r2, r8
 80036cc:	189b      	adds	r3, r3, r2
 80036ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d0:	464b      	mov	r3, r9
 80036d2:	460a      	mov	r2, r1
 80036d4:	eb42 0303 	adc.w	r3, r2, r3
 80036d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	663b      	str	r3, [r7, #96]	; 0x60
 80036e4:	667a      	str	r2, [r7, #100]	; 0x64
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036f2:	4649      	mov	r1, r9
 80036f4:	008b      	lsls	r3, r1, #2
 80036f6:	4641      	mov	r1, r8
 80036f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036fc:	4641      	mov	r1, r8
 80036fe:	008a      	lsls	r2, r1, #2
 8003700:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003704:	f7fd f9e2 	bl	8000acc <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <UART_SetConfig+0x4e4>)
 800370e:	fba3 1302 	umull	r1, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2164      	movs	r1, #100	; 0x64
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	3332      	adds	r3, #50	; 0x32
 8003720:	4a08      	ldr	r2, [pc, #32]	; (8003744 <UART_SetConfig+0x4e4>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	f003 020f 	and.w	r2, r3, #15
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4422      	add	r2, r4
 8003734:	609a      	str	r2, [r3, #8]
}
 8003736:	bf00      	nop
 8003738:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003742:	bf00      	nop
 8003744:	51eb851f 	.word	0x51eb851f

08003748 <__errno>:
 8003748:	4b01      	ldr	r3, [pc, #4]	; (8003750 <__errno+0x8>)
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	200000f8 	.word	0x200000f8

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4d0d      	ldr	r5, [pc, #52]	; (800378c <__libc_init_array+0x38>)
 8003758:	4c0d      	ldr	r4, [pc, #52]	; (8003790 <__libc_init_array+0x3c>)
 800375a:	1b64      	subs	r4, r4, r5
 800375c:	10a4      	asrs	r4, r4, #2
 800375e:	2600      	movs	r6, #0
 8003760:	42a6      	cmp	r6, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	4d0b      	ldr	r5, [pc, #44]	; (8003794 <__libc_init_array+0x40>)
 8003766:	4c0c      	ldr	r4, [pc, #48]	; (8003798 <__libc_init_array+0x44>)
 8003768:	f000 fc8e 	bl	8004088 <_init>
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	2600      	movs	r6, #0
 8003772:	42a6      	cmp	r6, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	f855 3b04 	ldr.w	r3, [r5], #4
 800377c:	4798      	blx	r3
 800377e:	3601      	adds	r6, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	f855 3b04 	ldr.w	r3, [r5], #4
 8003786:	4798      	blx	r3
 8003788:	3601      	adds	r6, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	08004b54 	.word	0x08004b54
 8003790:	08004b54 	.word	0x08004b54
 8003794:	08004b54 	.word	0x08004b54
 8003798:	08004b58 	.word	0x08004b58

0800379c <memset>:
 800379c:	4402      	add	r2, r0
 800379e:	4603      	mov	r3, r0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d100      	bne.n	80037a6 <memset+0xa>
 80037a4:	4770      	bx	lr
 80037a6:	f803 1b01 	strb.w	r1, [r3], #1
 80037aa:	e7f9      	b.n	80037a0 <memset+0x4>

080037ac <siprintf>:
 80037ac:	b40e      	push	{r1, r2, r3}
 80037ae:	b500      	push	{lr}
 80037b0:	b09c      	sub	sp, #112	; 0x70
 80037b2:	ab1d      	add	r3, sp, #116	; 0x74
 80037b4:	9002      	str	r0, [sp, #8]
 80037b6:	9006      	str	r0, [sp, #24]
 80037b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037bc:	4809      	ldr	r0, [pc, #36]	; (80037e4 <siprintf+0x38>)
 80037be:	9107      	str	r1, [sp, #28]
 80037c0:	9104      	str	r1, [sp, #16]
 80037c2:	4909      	ldr	r1, [pc, #36]	; (80037e8 <siprintf+0x3c>)
 80037c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80037c8:	9105      	str	r1, [sp, #20]
 80037ca:	6800      	ldr	r0, [r0, #0]
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	a902      	add	r1, sp, #8
 80037d0:	f000 f868 	bl	80038a4 <_svfiprintf_r>
 80037d4:	9b02      	ldr	r3, [sp, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	b01c      	add	sp, #112	; 0x70
 80037dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e0:	b003      	add	sp, #12
 80037e2:	4770      	bx	lr
 80037e4:	200000f8 	.word	0x200000f8
 80037e8:	ffff0208 	.word	0xffff0208

080037ec <__ssputs_r>:
 80037ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f0:	688e      	ldr	r6, [r1, #8]
 80037f2:	429e      	cmp	r6, r3
 80037f4:	4682      	mov	sl, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	4690      	mov	r8, r2
 80037fa:	461f      	mov	r7, r3
 80037fc:	d838      	bhi.n	8003870 <__ssputs_r+0x84>
 80037fe:	898a      	ldrh	r2, [r1, #12]
 8003800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003804:	d032      	beq.n	800386c <__ssputs_r+0x80>
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	6909      	ldr	r1, [r1, #16]
 800380a:	eba5 0901 	sub.w	r9, r5, r1
 800380e:	6965      	ldr	r5, [r4, #20]
 8003810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003818:	3301      	adds	r3, #1
 800381a:	444b      	add	r3, r9
 800381c:	106d      	asrs	r5, r5, #1
 800381e:	429d      	cmp	r5, r3
 8003820:	bf38      	it	cc
 8003822:	461d      	movcc	r5, r3
 8003824:	0553      	lsls	r3, r2, #21
 8003826:	d531      	bpl.n	800388c <__ssputs_r+0xa0>
 8003828:	4629      	mov	r1, r5
 800382a:	f000 fb63 	bl	8003ef4 <_malloc_r>
 800382e:	4606      	mov	r6, r0
 8003830:	b950      	cbnz	r0, 8003848 <__ssputs_r+0x5c>
 8003832:	230c      	movs	r3, #12
 8003834:	f8ca 3000 	str.w	r3, [sl]
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800383e:	81a3      	strh	r3, [r4, #12]
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003848:	6921      	ldr	r1, [r4, #16]
 800384a:	464a      	mov	r2, r9
 800384c:	f000 fabe 	bl	8003dcc <memcpy>
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	6126      	str	r6, [r4, #16]
 800385e:	6165      	str	r5, [r4, #20]
 8003860:	444e      	add	r6, r9
 8003862:	eba5 0509 	sub.w	r5, r5, r9
 8003866:	6026      	str	r6, [r4, #0]
 8003868:	60a5      	str	r5, [r4, #8]
 800386a:	463e      	mov	r6, r7
 800386c:	42be      	cmp	r6, r7
 800386e:	d900      	bls.n	8003872 <__ssputs_r+0x86>
 8003870:	463e      	mov	r6, r7
 8003872:	6820      	ldr	r0, [r4, #0]
 8003874:	4632      	mov	r2, r6
 8003876:	4641      	mov	r1, r8
 8003878:	f000 fab6 	bl	8003de8 <memmove>
 800387c:	68a3      	ldr	r3, [r4, #8]
 800387e:	1b9b      	subs	r3, r3, r6
 8003880:	60a3      	str	r3, [r4, #8]
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	4433      	add	r3, r6
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	2000      	movs	r0, #0
 800388a:	e7db      	b.n	8003844 <__ssputs_r+0x58>
 800388c:	462a      	mov	r2, r5
 800388e:	f000 fba5 	bl	8003fdc <_realloc_r>
 8003892:	4606      	mov	r6, r0
 8003894:	2800      	cmp	r0, #0
 8003896:	d1e1      	bne.n	800385c <__ssputs_r+0x70>
 8003898:	6921      	ldr	r1, [r4, #16]
 800389a:	4650      	mov	r0, sl
 800389c:	f000 fabe 	bl	8003e1c <_free_r>
 80038a0:	e7c7      	b.n	8003832 <__ssputs_r+0x46>
	...

080038a4 <_svfiprintf_r>:
 80038a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a8:	4698      	mov	r8, r3
 80038aa:	898b      	ldrh	r3, [r1, #12]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	b09d      	sub	sp, #116	; 0x74
 80038b0:	4607      	mov	r7, r0
 80038b2:	460d      	mov	r5, r1
 80038b4:	4614      	mov	r4, r2
 80038b6:	d50e      	bpl.n	80038d6 <_svfiprintf_r+0x32>
 80038b8:	690b      	ldr	r3, [r1, #16]
 80038ba:	b963      	cbnz	r3, 80038d6 <_svfiprintf_r+0x32>
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	f000 fb19 	bl	8003ef4 <_malloc_r>
 80038c2:	6028      	str	r0, [r5, #0]
 80038c4:	6128      	str	r0, [r5, #16]
 80038c6:	b920      	cbnz	r0, 80038d2 <_svfiprintf_r+0x2e>
 80038c8:	230c      	movs	r3, #12
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	e0d1      	b.n	8003a76 <_svfiprintf_r+0x1d2>
 80038d2:	2340      	movs	r3, #64	; 0x40
 80038d4:	616b      	str	r3, [r5, #20]
 80038d6:	2300      	movs	r3, #0
 80038d8:	9309      	str	r3, [sp, #36]	; 0x24
 80038da:	2320      	movs	r3, #32
 80038dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80038e4:	2330      	movs	r3, #48	; 0x30
 80038e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a90 <_svfiprintf_r+0x1ec>
 80038ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ee:	f04f 0901 	mov.w	r9, #1
 80038f2:	4623      	mov	r3, r4
 80038f4:	469a      	mov	sl, r3
 80038f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038fa:	b10a      	cbz	r2, 8003900 <_svfiprintf_r+0x5c>
 80038fc:	2a25      	cmp	r2, #37	; 0x25
 80038fe:	d1f9      	bne.n	80038f4 <_svfiprintf_r+0x50>
 8003900:	ebba 0b04 	subs.w	fp, sl, r4
 8003904:	d00b      	beq.n	800391e <_svfiprintf_r+0x7a>
 8003906:	465b      	mov	r3, fp
 8003908:	4622      	mov	r2, r4
 800390a:	4629      	mov	r1, r5
 800390c:	4638      	mov	r0, r7
 800390e:	f7ff ff6d 	bl	80037ec <__ssputs_r>
 8003912:	3001      	adds	r0, #1
 8003914:	f000 80aa 	beq.w	8003a6c <_svfiprintf_r+0x1c8>
 8003918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800391a:	445a      	add	r2, fp
 800391c:	9209      	str	r2, [sp, #36]	; 0x24
 800391e:	f89a 3000 	ldrb.w	r3, [sl]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80a2 	beq.w	8003a6c <_svfiprintf_r+0x1c8>
 8003928:	2300      	movs	r3, #0
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003932:	f10a 0a01 	add.w	sl, sl, #1
 8003936:	9304      	str	r3, [sp, #16]
 8003938:	9307      	str	r3, [sp, #28]
 800393a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800393e:	931a      	str	r3, [sp, #104]	; 0x68
 8003940:	4654      	mov	r4, sl
 8003942:	2205      	movs	r2, #5
 8003944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003948:	4851      	ldr	r0, [pc, #324]	; (8003a90 <_svfiprintf_r+0x1ec>)
 800394a:	f7fc fc51 	bl	80001f0 <memchr>
 800394e:	9a04      	ldr	r2, [sp, #16]
 8003950:	b9d8      	cbnz	r0, 800398a <_svfiprintf_r+0xe6>
 8003952:	06d0      	lsls	r0, r2, #27
 8003954:	bf44      	itt	mi
 8003956:	2320      	movmi	r3, #32
 8003958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800395c:	0711      	lsls	r1, r2, #28
 800395e:	bf44      	itt	mi
 8003960:	232b      	movmi	r3, #43	; 0x2b
 8003962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003966:	f89a 3000 	ldrb.w	r3, [sl]
 800396a:	2b2a      	cmp	r3, #42	; 0x2a
 800396c:	d015      	beq.n	800399a <_svfiprintf_r+0xf6>
 800396e:	9a07      	ldr	r2, [sp, #28]
 8003970:	4654      	mov	r4, sl
 8003972:	2000      	movs	r0, #0
 8003974:	f04f 0c0a 	mov.w	ip, #10
 8003978:	4621      	mov	r1, r4
 800397a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800397e:	3b30      	subs	r3, #48	; 0x30
 8003980:	2b09      	cmp	r3, #9
 8003982:	d94e      	bls.n	8003a22 <_svfiprintf_r+0x17e>
 8003984:	b1b0      	cbz	r0, 80039b4 <_svfiprintf_r+0x110>
 8003986:	9207      	str	r2, [sp, #28]
 8003988:	e014      	b.n	80039b4 <_svfiprintf_r+0x110>
 800398a:	eba0 0308 	sub.w	r3, r0, r8
 800398e:	fa09 f303 	lsl.w	r3, r9, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	9304      	str	r3, [sp, #16]
 8003996:	46a2      	mov	sl, r4
 8003998:	e7d2      	b.n	8003940 <_svfiprintf_r+0x9c>
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	1d19      	adds	r1, r3, #4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	9103      	str	r1, [sp, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bfbb      	ittet	lt
 80039a6:	425b      	neglt	r3, r3
 80039a8:	f042 0202 	orrlt.w	r2, r2, #2
 80039ac:	9307      	strge	r3, [sp, #28]
 80039ae:	9307      	strlt	r3, [sp, #28]
 80039b0:	bfb8      	it	lt
 80039b2:	9204      	strlt	r2, [sp, #16]
 80039b4:	7823      	ldrb	r3, [r4, #0]
 80039b6:	2b2e      	cmp	r3, #46	; 0x2e
 80039b8:	d10c      	bne.n	80039d4 <_svfiprintf_r+0x130>
 80039ba:	7863      	ldrb	r3, [r4, #1]
 80039bc:	2b2a      	cmp	r3, #42	; 0x2a
 80039be:	d135      	bne.n	8003a2c <_svfiprintf_r+0x188>
 80039c0:	9b03      	ldr	r3, [sp, #12]
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	9203      	str	r2, [sp, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bfb8      	it	lt
 80039cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80039d0:	3402      	adds	r4, #2
 80039d2:	9305      	str	r3, [sp, #20]
 80039d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003aa0 <_svfiprintf_r+0x1fc>
 80039d8:	7821      	ldrb	r1, [r4, #0]
 80039da:	2203      	movs	r2, #3
 80039dc:	4650      	mov	r0, sl
 80039de:	f7fc fc07 	bl	80001f0 <memchr>
 80039e2:	b140      	cbz	r0, 80039f6 <_svfiprintf_r+0x152>
 80039e4:	2340      	movs	r3, #64	; 0x40
 80039e6:	eba0 000a 	sub.w	r0, r0, sl
 80039ea:	fa03 f000 	lsl.w	r0, r3, r0
 80039ee:	9b04      	ldr	r3, [sp, #16]
 80039f0:	4303      	orrs	r3, r0
 80039f2:	3401      	adds	r4, #1
 80039f4:	9304      	str	r3, [sp, #16]
 80039f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039fa:	4826      	ldr	r0, [pc, #152]	; (8003a94 <_svfiprintf_r+0x1f0>)
 80039fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a00:	2206      	movs	r2, #6
 8003a02:	f7fc fbf5 	bl	80001f0 <memchr>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d038      	beq.n	8003a7c <_svfiprintf_r+0x1d8>
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <_svfiprintf_r+0x1f4>)
 8003a0c:	bb1b      	cbnz	r3, 8003a56 <_svfiprintf_r+0x1b2>
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	3307      	adds	r3, #7
 8003a12:	f023 0307 	bic.w	r3, r3, #7
 8003a16:	3308      	adds	r3, #8
 8003a18:	9303      	str	r3, [sp, #12]
 8003a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1c:	4433      	add	r3, r6
 8003a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a20:	e767      	b.n	80038f2 <_svfiprintf_r+0x4e>
 8003a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a26:	460c      	mov	r4, r1
 8003a28:	2001      	movs	r0, #1
 8003a2a:	e7a5      	b.n	8003978 <_svfiprintf_r+0xd4>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	3401      	adds	r4, #1
 8003a30:	9305      	str	r3, [sp, #20]
 8003a32:	4619      	mov	r1, r3
 8003a34:	f04f 0c0a 	mov.w	ip, #10
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a3e:	3a30      	subs	r2, #48	; 0x30
 8003a40:	2a09      	cmp	r2, #9
 8003a42:	d903      	bls.n	8003a4c <_svfiprintf_r+0x1a8>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0c5      	beq.n	80039d4 <_svfiprintf_r+0x130>
 8003a48:	9105      	str	r1, [sp, #20]
 8003a4a:	e7c3      	b.n	80039d4 <_svfiprintf_r+0x130>
 8003a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a50:	4604      	mov	r4, r0
 8003a52:	2301      	movs	r3, #1
 8003a54:	e7f0      	b.n	8003a38 <_svfiprintf_r+0x194>
 8003a56:	ab03      	add	r3, sp, #12
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	462a      	mov	r2, r5
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <_svfiprintf_r+0x1f8>)
 8003a5e:	a904      	add	r1, sp, #16
 8003a60:	4638      	mov	r0, r7
 8003a62:	f3af 8000 	nop.w
 8003a66:	1c42      	adds	r2, r0, #1
 8003a68:	4606      	mov	r6, r0
 8003a6a:	d1d6      	bne.n	8003a1a <_svfiprintf_r+0x176>
 8003a6c:	89ab      	ldrh	r3, [r5, #12]
 8003a6e:	065b      	lsls	r3, r3, #25
 8003a70:	f53f af2c 	bmi.w	80038cc <_svfiprintf_r+0x28>
 8003a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a76:	b01d      	add	sp, #116	; 0x74
 8003a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7c:	ab03      	add	r3, sp, #12
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	462a      	mov	r2, r5
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <_svfiprintf_r+0x1f8>)
 8003a84:	a904      	add	r1, sp, #16
 8003a86:	4638      	mov	r0, r7
 8003a88:	f000 f87a 	bl	8003b80 <_printf_i>
 8003a8c:	e7eb      	b.n	8003a66 <_svfiprintf_r+0x1c2>
 8003a8e:	bf00      	nop
 8003a90:	08004b18 	.word	0x08004b18
 8003a94:	08004b22 	.word	0x08004b22
 8003a98:	00000000 	.word	0x00000000
 8003a9c:	080037ed 	.word	0x080037ed
 8003aa0:	08004b1e 	.word	0x08004b1e

08003aa4 <_printf_common>:
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	4616      	mov	r6, r2
 8003aaa:	4699      	mov	r9, r3
 8003aac:	688a      	ldr	r2, [r1, #8]
 8003aae:	690b      	ldr	r3, [r1, #16]
 8003ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	bfb8      	it	lt
 8003ab8:	4613      	movlt	r3, r2
 8003aba:	6033      	str	r3, [r6, #0]
 8003abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	b10a      	cbz	r2, 8003aca <_printf_common+0x26>
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	6033      	str	r3, [r6, #0]
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	0699      	lsls	r1, r3, #26
 8003ace:	bf42      	ittt	mi
 8003ad0:	6833      	ldrmi	r3, [r6, #0]
 8003ad2:	3302      	addmi	r3, #2
 8003ad4:	6033      	strmi	r3, [r6, #0]
 8003ad6:	6825      	ldr	r5, [r4, #0]
 8003ad8:	f015 0506 	ands.w	r5, r5, #6
 8003adc:	d106      	bne.n	8003aec <_printf_common+0x48>
 8003ade:	f104 0a19 	add.w	sl, r4, #25
 8003ae2:	68e3      	ldr	r3, [r4, #12]
 8003ae4:	6832      	ldr	r2, [r6, #0]
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	42ab      	cmp	r3, r5
 8003aea:	dc26      	bgt.n	8003b3a <_printf_common+0x96>
 8003aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003af0:	1e13      	subs	r3, r2, #0
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	bf18      	it	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	0692      	lsls	r2, r2, #26
 8003afa:	d42b      	bmi.n	8003b54 <_printf_common+0xb0>
 8003afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b00:	4649      	mov	r1, r9
 8003b02:	4638      	mov	r0, r7
 8003b04:	47c0      	blx	r8
 8003b06:	3001      	adds	r0, #1
 8003b08:	d01e      	beq.n	8003b48 <_printf_common+0xa4>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	68e5      	ldr	r5, [r4, #12]
 8003b0e:	6832      	ldr	r2, [r6, #0]
 8003b10:	f003 0306 	and.w	r3, r3, #6
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	bf08      	it	eq
 8003b18:	1aad      	subeq	r5, r5, r2
 8003b1a:	68a3      	ldr	r3, [r4, #8]
 8003b1c:	6922      	ldr	r2, [r4, #16]
 8003b1e:	bf0c      	ite	eq
 8003b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b24:	2500      	movne	r5, #0
 8003b26:	4293      	cmp	r3, r2
 8003b28:	bfc4      	itt	gt
 8003b2a:	1a9b      	subgt	r3, r3, r2
 8003b2c:	18ed      	addgt	r5, r5, r3
 8003b2e:	2600      	movs	r6, #0
 8003b30:	341a      	adds	r4, #26
 8003b32:	42b5      	cmp	r5, r6
 8003b34:	d11a      	bne.n	8003b6c <_printf_common+0xc8>
 8003b36:	2000      	movs	r0, #0
 8003b38:	e008      	b.n	8003b4c <_printf_common+0xa8>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4652      	mov	r2, sl
 8003b3e:	4649      	mov	r1, r9
 8003b40:	4638      	mov	r0, r7
 8003b42:	47c0      	blx	r8
 8003b44:	3001      	adds	r0, #1
 8003b46:	d103      	bne.n	8003b50 <_printf_common+0xac>
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b50:	3501      	adds	r5, #1
 8003b52:	e7c6      	b.n	8003ae2 <_printf_common+0x3e>
 8003b54:	18e1      	adds	r1, r4, r3
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	2030      	movs	r0, #48	; 0x30
 8003b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b5e:	4422      	add	r2, r4
 8003b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b68:	3302      	adds	r3, #2
 8003b6a:	e7c7      	b.n	8003afc <_printf_common+0x58>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	4622      	mov	r2, r4
 8003b70:	4649      	mov	r1, r9
 8003b72:	4638      	mov	r0, r7
 8003b74:	47c0      	blx	r8
 8003b76:	3001      	adds	r0, #1
 8003b78:	d0e6      	beq.n	8003b48 <_printf_common+0xa4>
 8003b7a:	3601      	adds	r6, #1
 8003b7c:	e7d9      	b.n	8003b32 <_printf_common+0x8e>
	...

08003b80 <_printf_i>:
 8003b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b84:	7e0f      	ldrb	r7, [r1, #24]
 8003b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b88:	2f78      	cmp	r7, #120	; 0x78
 8003b8a:	4691      	mov	r9, r2
 8003b8c:	4680      	mov	r8, r0
 8003b8e:	460c      	mov	r4, r1
 8003b90:	469a      	mov	sl, r3
 8003b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b96:	d807      	bhi.n	8003ba8 <_printf_i+0x28>
 8003b98:	2f62      	cmp	r7, #98	; 0x62
 8003b9a:	d80a      	bhi.n	8003bb2 <_printf_i+0x32>
 8003b9c:	2f00      	cmp	r7, #0
 8003b9e:	f000 80d8 	beq.w	8003d52 <_printf_i+0x1d2>
 8003ba2:	2f58      	cmp	r7, #88	; 0x58
 8003ba4:	f000 80a3 	beq.w	8003cee <_printf_i+0x16e>
 8003ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bb0:	e03a      	b.n	8003c28 <_printf_i+0xa8>
 8003bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bb6:	2b15      	cmp	r3, #21
 8003bb8:	d8f6      	bhi.n	8003ba8 <_printf_i+0x28>
 8003bba:	a101      	add	r1, pc, #4	; (adr r1, 8003bc0 <_printf_i+0x40>)
 8003bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bc0:	08003c19 	.word	0x08003c19
 8003bc4:	08003c2d 	.word	0x08003c2d
 8003bc8:	08003ba9 	.word	0x08003ba9
 8003bcc:	08003ba9 	.word	0x08003ba9
 8003bd0:	08003ba9 	.word	0x08003ba9
 8003bd4:	08003ba9 	.word	0x08003ba9
 8003bd8:	08003c2d 	.word	0x08003c2d
 8003bdc:	08003ba9 	.word	0x08003ba9
 8003be0:	08003ba9 	.word	0x08003ba9
 8003be4:	08003ba9 	.word	0x08003ba9
 8003be8:	08003ba9 	.word	0x08003ba9
 8003bec:	08003d39 	.word	0x08003d39
 8003bf0:	08003c5d 	.word	0x08003c5d
 8003bf4:	08003d1b 	.word	0x08003d1b
 8003bf8:	08003ba9 	.word	0x08003ba9
 8003bfc:	08003ba9 	.word	0x08003ba9
 8003c00:	08003d5b 	.word	0x08003d5b
 8003c04:	08003ba9 	.word	0x08003ba9
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003ba9 	.word	0x08003ba9
 8003c10:	08003ba9 	.word	0x08003ba9
 8003c14:	08003d23 	.word	0x08003d23
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	1d1a      	adds	r2, r3, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	602a      	str	r2, [r5, #0]
 8003c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0a3      	b.n	8003d74 <_printf_i+0x1f4>
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	6829      	ldr	r1, [r5, #0]
 8003c30:	0606      	lsls	r6, r0, #24
 8003c32:	f101 0304 	add.w	r3, r1, #4
 8003c36:	d50a      	bpl.n	8003c4e <_printf_i+0xce>
 8003c38:	680e      	ldr	r6, [r1, #0]
 8003c3a:	602b      	str	r3, [r5, #0]
 8003c3c:	2e00      	cmp	r6, #0
 8003c3e:	da03      	bge.n	8003c48 <_printf_i+0xc8>
 8003c40:	232d      	movs	r3, #45	; 0x2d
 8003c42:	4276      	negs	r6, r6
 8003c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c48:	485e      	ldr	r0, [pc, #376]	; (8003dc4 <_printf_i+0x244>)
 8003c4a:	230a      	movs	r3, #10
 8003c4c:	e019      	b.n	8003c82 <_printf_i+0x102>
 8003c4e:	680e      	ldr	r6, [r1, #0]
 8003c50:	602b      	str	r3, [r5, #0]
 8003c52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c56:	bf18      	it	ne
 8003c58:	b236      	sxthne	r6, r6
 8003c5a:	e7ef      	b.n	8003c3c <_printf_i+0xbc>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	6820      	ldr	r0, [r4, #0]
 8003c60:	1d19      	adds	r1, r3, #4
 8003c62:	6029      	str	r1, [r5, #0]
 8003c64:	0601      	lsls	r1, r0, #24
 8003c66:	d501      	bpl.n	8003c6c <_printf_i+0xec>
 8003c68:	681e      	ldr	r6, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <_printf_i+0xf2>
 8003c6c:	0646      	lsls	r6, r0, #25
 8003c6e:	d5fb      	bpl.n	8003c68 <_printf_i+0xe8>
 8003c70:	881e      	ldrh	r6, [r3, #0]
 8003c72:	4854      	ldr	r0, [pc, #336]	; (8003dc4 <_printf_i+0x244>)
 8003c74:	2f6f      	cmp	r7, #111	; 0x6f
 8003c76:	bf0c      	ite	eq
 8003c78:	2308      	moveq	r3, #8
 8003c7a:	230a      	movne	r3, #10
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c82:	6865      	ldr	r5, [r4, #4]
 8003c84:	60a5      	str	r5, [r4, #8]
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	bfa2      	ittt	ge
 8003c8a:	6821      	ldrge	r1, [r4, #0]
 8003c8c:	f021 0104 	bicge.w	r1, r1, #4
 8003c90:	6021      	strge	r1, [r4, #0]
 8003c92:	b90e      	cbnz	r6, 8003c98 <_printf_i+0x118>
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	d04d      	beq.n	8003d34 <_printf_i+0x1b4>
 8003c98:	4615      	mov	r5, r2
 8003c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8003ca2:	5dc7      	ldrb	r7, [r0, r7]
 8003ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ca8:	4637      	mov	r7, r6
 8003caa:	42bb      	cmp	r3, r7
 8003cac:	460e      	mov	r6, r1
 8003cae:	d9f4      	bls.n	8003c9a <_printf_i+0x11a>
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d10b      	bne.n	8003ccc <_printf_i+0x14c>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	07de      	lsls	r6, r3, #31
 8003cb8:	d508      	bpl.n	8003ccc <_printf_i+0x14c>
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	6861      	ldr	r1, [r4, #4]
 8003cbe:	4299      	cmp	r1, r3
 8003cc0:	bfde      	ittt	le
 8003cc2:	2330      	movle	r3, #48	; 0x30
 8003cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ccc:	1b52      	subs	r2, r2, r5
 8003cce:	6122      	str	r2, [r4, #16]
 8003cd0:	f8cd a000 	str.w	sl, [sp]
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	aa03      	add	r2, sp, #12
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f7ff fee2 	bl	8003aa4 <_printf_common>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d14c      	bne.n	8003d7e <_printf_i+0x1fe>
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	b004      	add	sp, #16
 8003cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cee:	4835      	ldr	r0, [pc, #212]	; (8003dc4 <_printf_i+0x244>)
 8003cf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003cf4:	6829      	ldr	r1, [r5, #0]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cfc:	6029      	str	r1, [r5, #0]
 8003cfe:	061d      	lsls	r5, r3, #24
 8003d00:	d514      	bpl.n	8003d2c <_printf_i+0x1ac>
 8003d02:	07df      	lsls	r7, r3, #31
 8003d04:	bf44      	itt	mi
 8003d06:	f043 0320 	orrmi.w	r3, r3, #32
 8003d0a:	6023      	strmi	r3, [r4, #0]
 8003d0c:	b91e      	cbnz	r6, 8003d16 <_printf_i+0x196>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	f023 0320 	bic.w	r3, r3, #32
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	2310      	movs	r3, #16
 8003d18:	e7b0      	b.n	8003c7c <_printf_i+0xfc>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	f043 0320 	orr.w	r3, r3, #32
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	2378      	movs	r3, #120	; 0x78
 8003d24:	4828      	ldr	r0, [pc, #160]	; (8003dc8 <_printf_i+0x248>)
 8003d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d2a:	e7e3      	b.n	8003cf4 <_printf_i+0x174>
 8003d2c:	0659      	lsls	r1, r3, #25
 8003d2e:	bf48      	it	mi
 8003d30:	b2b6      	uxthmi	r6, r6
 8003d32:	e7e6      	b.n	8003d02 <_printf_i+0x182>
 8003d34:	4615      	mov	r5, r2
 8003d36:	e7bb      	b.n	8003cb0 <_printf_i+0x130>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	6826      	ldr	r6, [r4, #0]
 8003d3c:	6961      	ldr	r1, [r4, #20]
 8003d3e:	1d18      	adds	r0, r3, #4
 8003d40:	6028      	str	r0, [r5, #0]
 8003d42:	0635      	lsls	r5, r6, #24
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	d501      	bpl.n	8003d4c <_printf_i+0x1cc>
 8003d48:	6019      	str	r1, [r3, #0]
 8003d4a:	e002      	b.n	8003d52 <_printf_i+0x1d2>
 8003d4c:	0670      	lsls	r0, r6, #25
 8003d4e:	d5fb      	bpl.n	8003d48 <_printf_i+0x1c8>
 8003d50:	8019      	strh	r1, [r3, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	6123      	str	r3, [r4, #16]
 8003d56:	4615      	mov	r5, r2
 8003d58:	e7ba      	b.n	8003cd0 <_printf_i+0x150>
 8003d5a:	682b      	ldr	r3, [r5, #0]
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	602a      	str	r2, [r5, #0]
 8003d60:	681d      	ldr	r5, [r3, #0]
 8003d62:	6862      	ldr	r2, [r4, #4]
 8003d64:	2100      	movs	r1, #0
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7fc fa42 	bl	80001f0 <memchr>
 8003d6c:	b108      	cbz	r0, 8003d72 <_printf_i+0x1f2>
 8003d6e:	1b40      	subs	r0, r0, r5
 8003d70:	6060      	str	r0, [r4, #4]
 8003d72:	6863      	ldr	r3, [r4, #4]
 8003d74:	6123      	str	r3, [r4, #16]
 8003d76:	2300      	movs	r3, #0
 8003d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d7c:	e7a8      	b.n	8003cd0 <_printf_i+0x150>
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	462a      	mov	r2, r5
 8003d82:	4649      	mov	r1, r9
 8003d84:	4640      	mov	r0, r8
 8003d86:	47d0      	blx	sl
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d0ab      	beq.n	8003ce4 <_printf_i+0x164>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	079b      	lsls	r3, r3, #30
 8003d90:	d413      	bmi.n	8003dba <_printf_i+0x23a>
 8003d92:	68e0      	ldr	r0, [r4, #12]
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	4298      	cmp	r0, r3
 8003d98:	bfb8      	it	lt
 8003d9a:	4618      	movlt	r0, r3
 8003d9c:	e7a4      	b.n	8003ce8 <_printf_i+0x168>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	4632      	mov	r2, r6
 8003da2:	4649      	mov	r1, r9
 8003da4:	4640      	mov	r0, r8
 8003da6:	47d0      	blx	sl
 8003da8:	3001      	adds	r0, #1
 8003daa:	d09b      	beq.n	8003ce4 <_printf_i+0x164>
 8003dac:	3501      	adds	r5, #1
 8003dae:	68e3      	ldr	r3, [r4, #12]
 8003db0:	9903      	ldr	r1, [sp, #12]
 8003db2:	1a5b      	subs	r3, r3, r1
 8003db4:	42ab      	cmp	r3, r5
 8003db6:	dcf2      	bgt.n	8003d9e <_printf_i+0x21e>
 8003db8:	e7eb      	b.n	8003d92 <_printf_i+0x212>
 8003dba:	2500      	movs	r5, #0
 8003dbc:	f104 0619 	add.w	r6, r4, #25
 8003dc0:	e7f5      	b.n	8003dae <_printf_i+0x22e>
 8003dc2:	bf00      	nop
 8003dc4:	08004b29 	.word	0x08004b29
 8003dc8:	08004b3a 	.word	0x08004b3a

08003dcc <memcpy>:
 8003dcc:	440a      	add	r2, r1
 8003dce:	4291      	cmp	r1, r2
 8003dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dd4:	d100      	bne.n	8003dd8 <memcpy+0xc>
 8003dd6:	4770      	bx	lr
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003de2:	4291      	cmp	r1, r2
 8003de4:	d1f9      	bne.n	8003dda <memcpy+0xe>
 8003de6:	bd10      	pop	{r4, pc}

08003de8 <memmove>:
 8003de8:	4288      	cmp	r0, r1
 8003dea:	b510      	push	{r4, lr}
 8003dec:	eb01 0402 	add.w	r4, r1, r2
 8003df0:	d902      	bls.n	8003df8 <memmove+0x10>
 8003df2:	4284      	cmp	r4, r0
 8003df4:	4623      	mov	r3, r4
 8003df6:	d807      	bhi.n	8003e08 <memmove+0x20>
 8003df8:	1e43      	subs	r3, r0, #1
 8003dfa:	42a1      	cmp	r1, r4
 8003dfc:	d008      	beq.n	8003e10 <memmove+0x28>
 8003dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e06:	e7f8      	b.n	8003dfa <memmove+0x12>
 8003e08:	4402      	add	r2, r0
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	428a      	cmp	r2, r1
 8003e0e:	d100      	bne.n	8003e12 <memmove+0x2a>
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e1a:	e7f7      	b.n	8003e0c <memmove+0x24>

08003e1c <_free_r>:
 8003e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e1e:	2900      	cmp	r1, #0
 8003e20:	d044      	beq.n	8003eac <_free_r+0x90>
 8003e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e26:	9001      	str	r0, [sp, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e2e:	bfb8      	it	lt
 8003e30:	18e4      	addlt	r4, r4, r3
 8003e32:	f000 f913 	bl	800405c <__malloc_lock>
 8003e36:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <_free_r+0x94>)
 8003e38:	9801      	ldr	r0, [sp, #4]
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	b933      	cbnz	r3, 8003e4c <_free_r+0x30>
 8003e3e:	6063      	str	r3, [r4, #4]
 8003e40:	6014      	str	r4, [r2, #0]
 8003e42:	b003      	add	sp, #12
 8003e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e48:	f000 b90e 	b.w	8004068 <__malloc_unlock>
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	d908      	bls.n	8003e62 <_free_r+0x46>
 8003e50:	6825      	ldr	r5, [r4, #0]
 8003e52:	1961      	adds	r1, r4, r5
 8003e54:	428b      	cmp	r3, r1
 8003e56:	bf01      	itttt	eq
 8003e58:	6819      	ldreq	r1, [r3, #0]
 8003e5a:	685b      	ldreq	r3, [r3, #4]
 8003e5c:	1949      	addeq	r1, r1, r5
 8003e5e:	6021      	streq	r1, [r4, #0]
 8003e60:	e7ed      	b.n	8003e3e <_free_r+0x22>
 8003e62:	461a      	mov	r2, r3
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	b10b      	cbz	r3, 8003e6c <_free_r+0x50>
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d9fa      	bls.n	8003e62 <_free_r+0x46>
 8003e6c:	6811      	ldr	r1, [r2, #0]
 8003e6e:	1855      	adds	r5, r2, r1
 8003e70:	42a5      	cmp	r5, r4
 8003e72:	d10b      	bne.n	8003e8c <_free_r+0x70>
 8003e74:	6824      	ldr	r4, [r4, #0]
 8003e76:	4421      	add	r1, r4
 8003e78:	1854      	adds	r4, r2, r1
 8003e7a:	42a3      	cmp	r3, r4
 8003e7c:	6011      	str	r1, [r2, #0]
 8003e7e:	d1e0      	bne.n	8003e42 <_free_r+0x26>
 8003e80:	681c      	ldr	r4, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	6053      	str	r3, [r2, #4]
 8003e86:	4421      	add	r1, r4
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	e7da      	b.n	8003e42 <_free_r+0x26>
 8003e8c:	d902      	bls.n	8003e94 <_free_r+0x78>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	6003      	str	r3, [r0, #0]
 8003e92:	e7d6      	b.n	8003e42 <_free_r+0x26>
 8003e94:	6825      	ldr	r5, [r4, #0]
 8003e96:	1961      	adds	r1, r4, r5
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	bf04      	itt	eq
 8003e9c:	6819      	ldreq	r1, [r3, #0]
 8003e9e:	685b      	ldreq	r3, [r3, #4]
 8003ea0:	6063      	str	r3, [r4, #4]
 8003ea2:	bf04      	itt	eq
 8003ea4:	1949      	addeq	r1, r1, r5
 8003ea6:	6021      	streq	r1, [r4, #0]
 8003ea8:	6054      	str	r4, [r2, #4]
 8003eaa:	e7ca      	b.n	8003e42 <_free_r+0x26>
 8003eac:	b003      	add	sp, #12
 8003eae:	bd30      	pop	{r4, r5, pc}
 8003eb0:	20000354 	.word	0x20000354

08003eb4 <sbrk_aligned>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	4e0e      	ldr	r6, [pc, #56]	; (8003ef0 <sbrk_aligned+0x3c>)
 8003eb8:	460c      	mov	r4, r1
 8003eba:	6831      	ldr	r1, [r6, #0]
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	b911      	cbnz	r1, 8003ec6 <sbrk_aligned+0x12>
 8003ec0:	f000 f8bc 	bl	800403c <_sbrk_r>
 8003ec4:	6030      	str	r0, [r6, #0]
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f000 f8b7 	bl	800403c <_sbrk_r>
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	d00a      	beq.n	8003ee8 <sbrk_aligned+0x34>
 8003ed2:	1cc4      	adds	r4, r0, #3
 8003ed4:	f024 0403 	bic.w	r4, r4, #3
 8003ed8:	42a0      	cmp	r0, r4
 8003eda:	d007      	beq.n	8003eec <sbrk_aligned+0x38>
 8003edc:	1a21      	subs	r1, r4, r0
 8003ede:	4628      	mov	r0, r5
 8003ee0:	f000 f8ac 	bl	800403c <_sbrk_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d101      	bne.n	8003eec <sbrk_aligned+0x38>
 8003ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8003eec:	4620      	mov	r0, r4
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	20000358 	.word	0x20000358

08003ef4 <_malloc_r>:
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef8:	1ccd      	adds	r5, r1, #3
 8003efa:	f025 0503 	bic.w	r5, r5, #3
 8003efe:	3508      	adds	r5, #8
 8003f00:	2d0c      	cmp	r5, #12
 8003f02:	bf38      	it	cc
 8003f04:	250c      	movcc	r5, #12
 8003f06:	2d00      	cmp	r5, #0
 8003f08:	4607      	mov	r7, r0
 8003f0a:	db01      	blt.n	8003f10 <_malloc_r+0x1c>
 8003f0c:	42a9      	cmp	r1, r5
 8003f0e:	d905      	bls.n	8003f1c <_malloc_r+0x28>
 8003f10:	230c      	movs	r3, #12
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	2600      	movs	r6, #0
 8003f16:	4630      	mov	r0, r6
 8003f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f1c:	4e2e      	ldr	r6, [pc, #184]	; (8003fd8 <_malloc_r+0xe4>)
 8003f1e:	f000 f89d 	bl	800405c <__malloc_lock>
 8003f22:	6833      	ldr	r3, [r6, #0]
 8003f24:	461c      	mov	r4, r3
 8003f26:	bb34      	cbnz	r4, 8003f76 <_malloc_r+0x82>
 8003f28:	4629      	mov	r1, r5
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	f7ff ffc2 	bl	8003eb4 <sbrk_aligned>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	4604      	mov	r4, r0
 8003f34:	d14d      	bne.n	8003fd2 <_malloc_r+0xde>
 8003f36:	6834      	ldr	r4, [r6, #0]
 8003f38:	4626      	mov	r6, r4
 8003f3a:	2e00      	cmp	r6, #0
 8003f3c:	d140      	bne.n	8003fc0 <_malloc_r+0xcc>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	4631      	mov	r1, r6
 8003f42:	4638      	mov	r0, r7
 8003f44:	eb04 0803 	add.w	r8, r4, r3
 8003f48:	f000 f878 	bl	800403c <_sbrk_r>
 8003f4c:	4580      	cmp	r8, r0
 8003f4e:	d13a      	bne.n	8003fc6 <_malloc_r+0xd2>
 8003f50:	6821      	ldr	r1, [r4, #0]
 8003f52:	3503      	adds	r5, #3
 8003f54:	1a6d      	subs	r5, r5, r1
 8003f56:	f025 0503 	bic.w	r5, r5, #3
 8003f5a:	3508      	adds	r5, #8
 8003f5c:	2d0c      	cmp	r5, #12
 8003f5e:	bf38      	it	cc
 8003f60:	250c      	movcc	r5, #12
 8003f62:	4629      	mov	r1, r5
 8003f64:	4638      	mov	r0, r7
 8003f66:	f7ff ffa5 	bl	8003eb4 <sbrk_aligned>
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d02b      	beq.n	8003fc6 <_malloc_r+0xd2>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	442b      	add	r3, r5
 8003f72:	6023      	str	r3, [r4, #0]
 8003f74:	e00e      	b.n	8003f94 <_malloc_r+0xa0>
 8003f76:	6822      	ldr	r2, [r4, #0]
 8003f78:	1b52      	subs	r2, r2, r5
 8003f7a:	d41e      	bmi.n	8003fba <_malloc_r+0xc6>
 8003f7c:	2a0b      	cmp	r2, #11
 8003f7e:	d916      	bls.n	8003fae <_malloc_r+0xba>
 8003f80:	1961      	adds	r1, r4, r5
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	6025      	str	r5, [r4, #0]
 8003f86:	bf18      	it	ne
 8003f88:	6059      	strne	r1, [r3, #4]
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	bf08      	it	eq
 8003f8e:	6031      	streq	r1, [r6, #0]
 8003f90:	5162      	str	r2, [r4, r5]
 8003f92:	604b      	str	r3, [r1, #4]
 8003f94:	4638      	mov	r0, r7
 8003f96:	f104 060b 	add.w	r6, r4, #11
 8003f9a:	f000 f865 	bl	8004068 <__malloc_unlock>
 8003f9e:	f026 0607 	bic.w	r6, r6, #7
 8003fa2:	1d23      	adds	r3, r4, #4
 8003fa4:	1af2      	subs	r2, r6, r3
 8003fa6:	d0b6      	beq.n	8003f16 <_malloc_r+0x22>
 8003fa8:	1b9b      	subs	r3, r3, r6
 8003faa:	50a3      	str	r3, [r4, r2]
 8003fac:	e7b3      	b.n	8003f16 <_malloc_r+0x22>
 8003fae:	6862      	ldr	r2, [r4, #4]
 8003fb0:	42a3      	cmp	r3, r4
 8003fb2:	bf0c      	ite	eq
 8003fb4:	6032      	streq	r2, [r6, #0]
 8003fb6:	605a      	strne	r2, [r3, #4]
 8003fb8:	e7ec      	b.n	8003f94 <_malloc_r+0xa0>
 8003fba:	4623      	mov	r3, r4
 8003fbc:	6864      	ldr	r4, [r4, #4]
 8003fbe:	e7b2      	b.n	8003f26 <_malloc_r+0x32>
 8003fc0:	4634      	mov	r4, r6
 8003fc2:	6876      	ldr	r6, [r6, #4]
 8003fc4:	e7b9      	b.n	8003f3a <_malloc_r+0x46>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f000 f84c 	bl	8004068 <__malloc_unlock>
 8003fd0:	e7a1      	b.n	8003f16 <_malloc_r+0x22>
 8003fd2:	6025      	str	r5, [r4, #0]
 8003fd4:	e7de      	b.n	8003f94 <_malloc_r+0xa0>
 8003fd6:	bf00      	nop
 8003fd8:	20000354 	.word	0x20000354

08003fdc <_realloc_r>:
 8003fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe0:	4680      	mov	r8, r0
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	460e      	mov	r6, r1
 8003fe6:	b921      	cbnz	r1, 8003ff2 <_realloc_r+0x16>
 8003fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fec:	4611      	mov	r1, r2
 8003fee:	f7ff bf81 	b.w	8003ef4 <_malloc_r>
 8003ff2:	b92a      	cbnz	r2, 8004000 <_realloc_r+0x24>
 8003ff4:	f7ff ff12 	bl	8003e1c <_free_r>
 8003ff8:	4625      	mov	r5, r4
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004000:	f000 f838 	bl	8004074 <_malloc_usable_size_r>
 8004004:	4284      	cmp	r4, r0
 8004006:	4607      	mov	r7, r0
 8004008:	d802      	bhi.n	8004010 <_realloc_r+0x34>
 800400a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800400e:	d812      	bhi.n	8004036 <_realloc_r+0x5a>
 8004010:	4621      	mov	r1, r4
 8004012:	4640      	mov	r0, r8
 8004014:	f7ff ff6e 	bl	8003ef4 <_malloc_r>
 8004018:	4605      	mov	r5, r0
 800401a:	2800      	cmp	r0, #0
 800401c:	d0ed      	beq.n	8003ffa <_realloc_r+0x1e>
 800401e:	42bc      	cmp	r4, r7
 8004020:	4622      	mov	r2, r4
 8004022:	4631      	mov	r1, r6
 8004024:	bf28      	it	cs
 8004026:	463a      	movcs	r2, r7
 8004028:	f7ff fed0 	bl	8003dcc <memcpy>
 800402c:	4631      	mov	r1, r6
 800402e:	4640      	mov	r0, r8
 8004030:	f7ff fef4 	bl	8003e1c <_free_r>
 8004034:	e7e1      	b.n	8003ffa <_realloc_r+0x1e>
 8004036:	4635      	mov	r5, r6
 8004038:	e7df      	b.n	8003ffa <_realloc_r+0x1e>
	...

0800403c <_sbrk_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4d06      	ldr	r5, [pc, #24]	; (8004058 <_sbrk_r+0x1c>)
 8004040:	2300      	movs	r3, #0
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	602b      	str	r3, [r5, #0]
 8004048:	f7fd faba 	bl	80015c0 <_sbrk>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_sbrk_r+0x1a>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_sbrk_r+0x1a>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	2000035c 	.word	0x2000035c

0800405c <__malloc_lock>:
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <__malloc_lock+0x8>)
 800405e:	f000 b811 	b.w	8004084 <__retarget_lock_acquire_recursive>
 8004062:	bf00      	nop
 8004064:	20000360 	.word	0x20000360

08004068 <__malloc_unlock>:
 8004068:	4801      	ldr	r0, [pc, #4]	; (8004070 <__malloc_unlock+0x8>)
 800406a:	f000 b80c 	b.w	8004086 <__retarget_lock_release_recursive>
 800406e:	bf00      	nop
 8004070:	20000360 	.word	0x20000360

08004074 <_malloc_usable_size_r>:
 8004074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004078:	1f18      	subs	r0, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	bfbc      	itt	lt
 800407e:	580b      	ldrlt	r3, [r1, r0]
 8004080:	18c0      	addlt	r0, r0, r3
 8004082:	4770      	bx	lr

08004084 <__retarget_lock_acquire_recursive>:
 8004084:	4770      	bx	lr

08004086 <__retarget_lock_release_recursive>:
 8004086:	4770      	bx	lr

08004088 <_init>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr

08004094 <_fini>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr
